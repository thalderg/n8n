{
  "": "",
  "active": false,
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Search Events": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Telegram1": {
      "main": [
        []
      ]
    },
    "Create Monthly Goal in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Inbox Task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get a task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get many tasks in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update a Task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete a task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Close a task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Productivity Manager": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Weekly Goal in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Productivity Orchestrator": {
      "main": [
        [
          {
            "node": "Clarify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Clarify": {
      "main": [
        [
          {
            "node": "Clarification Set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Productivity Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clarification Set": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-06T09:56:34.648Z",
  "id": "WHBxwz9Q2hU6tews",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Productivity Manager 2.0",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -768,
        144
      ],
      "id": "c8a4e514-98da-4497-adab-a45f0232571b",
      "name": "Telegram Trigger",
      "webhookId": "c1f84551-2b6d-4c83-ba8e-4a0d4cd9e16d",
      "credentials": {
        "telegramApi": {
          "id": "CtMYqp19WyE0XY9E",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "ff5e1442-1f1a-412e-8b15-437d9cf3b58b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a6d6da92-8272-4f6f-97be-7b733fc5b6d2",
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "voice"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -608,
        144
      ],
      "id": "4e590501-360e-41cb-8a8f-f86a8aa47647",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "13f27e1a-8d2b-4e19-afe4-ee282c5098a7",
              "name": "=text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -336,
        32
      ],
      "id": "f12648fe-1d45-4889-b538-06ff157cd114",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -432,
        272
      ],
      "id": "52d8cf4b-f883-4141-9689-b911fbedc667",
      "name": "Telegram",
      "webhookId": "60c85e24-127b-4166-9353-28e9dbe6fac4",
      "credentials": {
        "telegramApi": {
          "id": "CtMYqp19WyE0XY9E",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -240,
        272
      ],
      "id": "7e651691-3750-4a11-99e6-e1df6cf0c80e",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "fcIDL6mBCr4eAnxg",
          "name": "OpenAi voice to text"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "frequencyPenalty": 0,
          "maxTokens": 800,
          "presencePenalty": 0,
          "temperature": 0,
          "timeout": 60000,
          "maxRetries": 3,
          "topP": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        128,
        560
      ],
      "id": "f7e00225-e210-4d57-ae04-93eab306a2fe",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "fcIDL6mBCr4eAnxg",
          "name": "OpenAi voice to text"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1296,
        160
      ],
      "id": "7c32ffcd-8b28-416f-8248-a06ce4b5f836",
      "name": "Telegram1",
      "webhookId": "1334d25c-b055-431f-88bf-f2e5be92a2ed",
      "credentials": {
        "telegramApi": {
          "id": "CtMYqp19WyE0XY9E",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "giopag81@gmail.com",
          "mode": "list",
          "cachedResultName": "giopag81@gmail.com"
        },
        "options": {
          "timeMin": "={{ $fromAI('StartDate','the start date and time for fetching events') }}",
          "timeMax": "={{ $fromAI('EndDate','the end date and time for fetching events') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        1136,
        528
      ],
      "id": "dadb92b1-8e9d-4945-bda7-89013ccea873",
      "name": "Search Events",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "RDxm6PWdrRguEIuu",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Creates Google Calendar Events",
        "calendar": {
          "__rl": true,
          "value": "giopag81@gmail.com",
          "mode": "list",
          "cachedResultName": "giopag81@gmail.com"
        },
        "start": "={{ $fromAI('StartDate','the start date and time for creating events') }}",
        "end": "={{ $fromAI('EndDate','the end date and time for creating events') }}",
        "additionalFields": {
          "summary": "={{ $fromAI('eventName','the name used for creating new events') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        1280,
        512
      ],
      "id": "dab8ae43-46e7-4de7-bc6c-7c41d0ab1a45",
      "name": "Create Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "RDxm6PWdrRguEIuu",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Update Google Calendar Event",
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "giopag81@gmail.com",
          "mode": "list",
          "cachedResultName": "giopag81@gmail.com"
        },
        "eventId": "={{ $fromAI('eventID','the event ID of the event needing updated') }}",
        "updateFields": {
          "end": "={{ $fromAI('updatedEnd','the updated end time and day of the event') }}",
          "start": "={{ $fromAI('updatedStart','the updated start time and day of the event') }}",
          "summary": "={{ $fromAI('eventName','the updated name of the event') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        1408,
        512
      ],
      "id": "0f40fafe-3403-4afa-ba1f-a1c41ee146b0",
      "name": "Update Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "RDxm6PWdrRguEIuu",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "2360779983",
          "mode": "list",
          "cachedResultName": "Monthly Goals"
        },
        "labels": "={{ $fromAI('Label') && $fromAI('Label').trim() !== '' ? $fromAI('Label').split(',').map((s) => s.trim()) : undefined }}",
        "content": "={{ $fromAI('Content','the content or objective details of the task') }}",
        "options": {
          "description": "={{ $fromAI('Description','A short description of the task') }}",
          "dueString": "={{ $fromAI('DueString','when the task is due') }}",
          "priority": "={{ $fromAI('Priority','the priority of the task') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        528,
        592
      ],
      "id": "ce243fd4-9145-4fd6-a989-8af12ba22186",
      "name": "Create Monthly Goal in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "2360667327",
          "mode": "list",
          "cachedResultName": "Inbox"
        },
        "labels": "={{ $fromAI('Label') && $fromAI('Label').trim() !== '' ? $fromAI('Label').split(',').map((s) => s.trim()) : undefined }}",
        "content": "={{ $fromAI('Content','the content or objective details of the task') }}",
        "options": {
          "description": "={{ $fromAI('Description','A short description of the task') }}",
          "dueString": "={{ $fromAI('DueString','when the task is due') }}",
          "priority": "={{ $fromAI('Priority','the priority of the task') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        448,
        496
      ],
      "id": "e606c5ab-84df-4bf2-95a0-06dd67808b05",
      "name": "Create Inbox Task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "taskId": "={{ $fromAI('TaskId', 'The ID of the task to retrieve') }}"
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        624,
        496
      ],
      "id": "76a21016-d3f3-4c99-ad0f-c5c51baf570c",
      "name": "Get a task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "filters": {
          "filter": "={{ $fromAI('Filter', 'Todoist filter expression. Examples: \"today\" for today tasks, \"search: task title\" to find by title, \"today & #Inbox\" for today inbox tasks, \"overdue\" for overdue tasks. Use & to combine conditions.') }}",
          "projectId": "={{ $fromAI('ProjectID', 'The ID of the project') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        800,
        496
      ],
      "id": "b1a1c967-433e-4ebc-9aaa-dcde289963c7",
      "name": "Get many tasks in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "taskId": "={{ $fromAI ('TaskID', 'The ID of the task to update') }}",
        "updateFields": {
          "content": "={{ $fromAI('Content','the content or objective details of the task') }}",
          "description": "={{ $fromAI('Description','A short description of the task') }}",
          "dueString": "={{ $fromAI('DueString','when the task is due') }}",
          "labels": "={{ $fromAI('Label') && $fromAI('Label').trim() !== '' ? $fromAI('Label').split(',').map((s) => s.trim()) : undefined }}",
          "priority": "={{ $fromAI('Priority','the priority of the task from P1 to P4') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        704,
        592
      ],
      "id": "60598a06-c651-45c5-aecc-de53dc4c28e6",
      "name": "Update a Task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{ $fromAI('TaskId', 'The ID of the task to delete') }}"
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        896,
        592
      ],
      "id": "a9bf9e0c-3df6-482c-830d-5afb0a3281de",
      "name": "Delete a task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "close",
        "taskId": "={{ $fromAI('TaskId', 'The ID of the task to close') }}"
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        992,
        512
      ],
      "id": "491a809f-4ca1-4f59-8da2-28842b7614bd",
      "name": "Close a task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "=<AgentInstructions>\n    <Role name=\"Productivity Manager Executor\">\n        <Description>Execute Orchestrator commands via n8n tools. Always verify create/update operations. Use real tool data only.</Description>\n        <CurrentDate>{{$now}}</CurrentDate>\n    </Role>\n\n    <Goal>Execute actions with exact Orchestrator parameters. Immediately verify all create/update operations by fetching real data. Translate responses to user-friendly format.</Goal>\n\n    <!-- === INPUT FROM ORCHESTRATOR === -->\n    <Input>\n        Receive JSON with:\n        • actions: [\"action1\"] or [\"action1\", \"action2\"]\n        • user_request: Original user message (with clarifications merged)\n        • parameters: {title, description, label, due_string, priority, project_id, date_context}\n        \n        Priority values from Orchestrator (DO NOT MODIFY):\n        • 1, 2, 3, or 4 (integers from Orchestrator)\n        • Pass to tools EXACTLY as received\n        \n        When user_request is critical:\n        • Multi-action transforms (event→task, task→event): Use user_request to identify what to search for\n        • Example: \"Convert doctor appointment to task\" → search for \"doctor appointment\" in calendar\n    </Input>\n\n    <!-- === FILTER SYNTAX === -->\n    <FilterSyntax>\n        n8n tool fields: Filter (expression) + ProjectID (optional)\n        \n        Expressions:\n        • Search: search: keyword\n        • Date: today | tomorrow | overdue\n        • Project: #Inbox | #ProjectName\n        • Combine: today & #Inbox | search: Buy Milk & #Inbox\n        \n        When to use:\n        • Filter: Most queries (flexible)\n        • ProjectID: Create tasks or query specific ID (6f26m8fgVWX954hr, 6f26m4h5fVvr2m9c)\n    </FilterSyntax>\n\n    <!-- === ACTION EXECUTION === -->\n    <Actions>\n        CREATE (inbox/weekly/monthly):\n        1. Create with parameters.priority EXACTLY as received (no conversion)\n        2. IMMEDIATELY verify: get_many_tasks with Filter=\"search: {title} & #{project}\"\n        3. Use verified data for output\n\n        UPDATE/CLOSE:\n        1. Search: Filter=\"search: {title} & #{project}\"\n        2. Execute with task_id + parameters.priority EXACTLY as received\n        3. IMMEDIATELY verify with same Filter\n        4. Use verified data for output\n\n        DELETE:\n        1. Search: Filter=\"search: {title} & #{project}\"\n        2. Delete with task_id\n\n        QUERY:\n        • \"today\" → Filter=\"today\"\n        • \"inbox today\" → Filter=\"today & #Inbox\"\n        • \"weekly goals\" → ProjectID=\"6f26m8fgVWX954hr\"\n        • \"overdue inbox\" → Filter=\"overdue & #Inbox\"\n\n        TRANSFORM (multi-action - user_request is CRITICAL):\n        Event→Task: [\"update_event\", \"create_inbox_task\"]\n        1. Parse user_request to identify event (e.g., \"doctor appointment\")\n        2. Search calendar: search_events with title from user_request\n        3. Update event (marks as deleted/cancelled)\n        4. Create task with parameters.priority EXACTLY as received\n        5. Verify task creation\n\n        Task→Event: [\"delete_task\", \"create_event\"]\n        1. Parse user_request to identify task (e.g., \"meeting\")\n        2. Search tasks: Filter=\"search: {from user_request} & #{project}\"\n        3. Delete task\n        4. Create event with parameters\n    </Actions>\n\n    <!-- === PROJECT MAPPING === -->\n    <Projects>\n        • project_id=\"\" → #Inbox\n        • project_id=\"6f26m8fgVWX954hr\" → Weekly (use ProjectID field)\n        • project_id=\"6f26m4h5fVvr2m9c\" → Monthly (use ProjectID field)\n    </Projects>\n\n    <!-- === OUTPUT FORMAT === -->\n    <Output>\n        Task creation (after verification):\n        \"✅ Created task: {emoji} {tool.content}\n        Description: {tool.description}\n        {#labels from tool.labels}\n        Priority: {translate tool.priority}\n        {status from tool.is_completed and tool.due}\"\n\n        Task listing:\n        \"{emoji} {tool.content}\n        Description: {tool.description}\n        {#labels from tool.labels}\n        Priority: {translate tool.priority}\n        {status from tool.is_completed and tool.due}\"\n\n        Transform confirmation:\n        \"✅ Converted {original type} to {new type}: {emoji} {tool.content}\n        Description: {tool.description}\n        {additional details}\"\n\n        Emoji: 🎯 goals | 📈 metrics | 🏆 achievements | 🚀 projects | 💡 ideas | 📋 default\n        \n        Priority translation (use exact tool.priority from response):\n        • tool.priority = 4 → \"Priority: P1 🔴\"\n        • tool.priority = 3 → \"Priority: P2 🟡\"\n        • tool.priority = 2 → \"Priority: P3 🟢\"\n        • tool.priority = 1 → \"Priority: P4 ⚪\"\n        \n        Status translation (use tool.is_completed and tool.due.date from response, compare with {{$now}}):\n        1. IF tool.is_completed == true → \"Completed ✅\"\n        2. ELSE IF tool.due.date == {{$now}} → \"Pending ⏳\"\n        3. ELSE IF tool.due.date < {{$now}} → \"Incomplete ⚠️\"\n        4. ELSE IF tool.due.date > {{$now}} → \"{tool.due.date in YYYY/MM/DD} 📅\"\n        5. ELSE (no due date) → \"Pending ⏳\"\n        \n        CRITICAL: Use ONLY tool.due.date value for status, never guess or assume dates\n    </Output>\n\n    <!-- === CRITICAL RULES === -->\n    <Rules>\n        • Never skip verification after create/update—mandatory second tool call\n        • Never fabricate task data—use only verified tool responses\n        • Use exact Orchestrator parameters.priority when calling tools (NO CONVERSION)\n        • Priority display: tool.priority → P1/P2/P3/P4 (4→P1, 3→P2, 2→P3, 1→P4)\n        • Status display: MUST use tool.is_completed and tool.due.date from response, compare with {{$now}}\n        • Never hallucinate status—if tool.due.date > {{$now}}, display the date with 📅\n        • For multi-action transforms: Parse user_request to identify what to search/transform\n        • Multiple matches: Ask user to choose\n        • No matches: Report not found\n        • Translation only in output display, not tool calls\n    </Rules>\n\n    <!-- === EXAMPLES === -->\n    <Examples>\n        Create task due tomorrow:\n        Input: parameters.priority=2, due_string=\"tomorrow\"\n        1. Create: priority=2\n        2. Verify returns: tool.priority=2, tool.due.date=\"2025-10-17\", tool.is_completed=false\n        3. Compare: \"2025-10-17\" > {{$now}} (2025-10-16)\n        4. Output: \"Priority: P3 🟢\" + \"2025/10/17 📅\"\n\n        Create task due today:\n        Input: due_string=\"today\"\n        1. Verify returns: tool.due.date=\"2025-10-16\", tool.is_completed=false\n        2. Compare: \"2025-10-16\" == {{$now}} (2025-10-16)\n        3. Output: \"Pending ⏳\"\n\n        Query overdue task:\n        1. get_many_tasks returns: tool.due.date=\"2025-10-15\", tool.is_completed=false\n        2. Compare: \"2025-10-15\" < {{$now}} (2025-10-16)\n        3. Output: \"Incomplete ⚠️\"\n\n        Query completed task:\n        1. get_many_tasks returns: tool.is_completed=true\n        2. Output: \"Completed ✅\"\n\n        Query task with no due date:\n        1. get_many_tasks returns: tool.due=null, tool.is_completed=false\n        2. Output: \"Pending ⏳\"\n    </Examples>\n</AgentInstructions>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        656,
        272
      ],
      "id": "529c5367-7617-457d-bf14-0ef0d97e7324",
      "name": "Productivity Manager"
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "2360780016",
          "mode": "list",
          "cachedResultName": "Weekly Goals"
        },
        "labels": "={{ $fromAI('Label') && $fromAI('Label').trim() !== '' ? $fromAI('Label').split(',').map((s) => s.trim()) : undefined }}",
        "content": "={{ $fromAI('Content','the content or objective details of the task') }}",
        "options": {
          "description": "={{ $fromAI('Description','A short description of the task') }}",
          "dueString": "={{ $fromAI('DueString','when the task is due') }}",
          "priority": "={{ $fromAI('Priority','the priority of the task') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        304,
        560
      ],
      "id": "693b57f2-ad2c-43b6-8404-3730d141484b",
      "name": "Create Weekly Goal in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=<AgentInstructions>\n    <Role name=\"Productivity Manager Orchestrator\">\n        <Description>Bridge between user and Productivity Manager. Convert user input to structured JSON for n8n\n            execution with context-aware clarifications.</Description>\n        <CurrentDate>{{$now}}</CurrentDate>\n    </Role>\n\n    <Goal>Convert user input into deterministic JSON actions for Todoist and Calendar operations, ensuring outputs\n        reference {{$now}} to avoid date hallucinations.</Goal>\n\n    <!-- === CORE LOGIC === -->\n    <ActionTypes>\n        • Tasks: \"add task\", \"todo\", \"buy\", \"clean\", \"complete\", \"finish\"\n        • Calendar: \"appointment\", \"meeting\", \"call with\", \"visit\", \"event\", times (2pm, 3:30)\n        • Goals: \"weekly goal\", \"monthly goal\", \"by end of week/month\", \"achieve\"\n        • Queries: \"what do I have\", \"what's today/tomorrow\", \"show me\", \"what goals\"\n        • Updates: \"move task\", \"change date\", \"update priority\", \"reschedule\"\n        • Complete: \"mark done\", \"complete task\", \"finish task\"\n        • Delete: \"delete task\", \"remove task\"\n        • Transform: \"change event to task\", \"make this a calendar event\", \"convert to task\"\n    </ActionTypes>\n\n    <ProjectRouting>\n        • Weekly (≤7 days) → \"6f26m8fgVWX954hr\"\n        • Monthly (≤30 days) → \"6f26m4h5fVvr2m9c\"\n        • Inbox/daily/specific date → \"\"\n    </ProjectRouting>\n\n    <MultiActionRules>\n        • Date queries (\"what's today/tomorrow/Friday\") → [\"search_events\", \"get_many_tasks\"]\n        • Goal queries (\"what goals\", \"show my goals\") → [\"get_many_tasks\"] with project_id: [\"6f26m8fgVWX954hr\", \"6f26m4h5fVvr2m9c\"]\n        • Event→Task transform (\"convert event to task\") → [\"update_event\", \"create_inbox_task\"]\n        • Task→Event transform (\"convert task to event\") → [\"delete_task\", \"create_event\"]\n    </MultiActionRules>\n\n    <Labels>\n        work, personal, crypto, ai, health, fitness, urgent, routine, phone, computer, errands, waiting\n        Format: Single \"personal\" | Multiple \"work,urgent\"\n    </Labels>\n\n    <Priority>\n        User: P1|urgent → 4, P2|high → 3, P3|medium → 2, P4|low → 1\n        Default: 2 (medium)\n    </Priority>\n\n    <!-- === INFERENCE RULES === -->\n    <ParameterInference>\n        • Description: If not provided, use title as description\n        • Label: If not provided, infer from title/description content:\n          - \"buy\", \"groceries\", \"shopping\" → \"personal,errands\"\n          - \"meeting\", \"call\", \"client\" → \"work\"\n          - \"workout\", \"gym\", \"exercise\" → \"health,fitness\"\n          - \"bitcoin\", \"ethereum\", \"trading\" → \"crypto\"\n          - \"AI\", \"model\", \"training\" → \"ai,work\"\n          - \"urgent\", \"asap\", \"immediately\" → add \"urgent\" to existing labels\n          - Default if unclear → \"personal\"\n    </ParameterInference>\n\n    <!-- === CLARIFICATION RULES === -->\n    <Clarification>\n        ASK when:\n        • Missing timing: \"add task\" without WHEN\n        • Vague timing: \"later\", \"soon\", \"sometime\"\n        • Task/calendar ambiguous: \"appointment tomorrow\"\n        • Calendar missing time: \"meeting Friday\" (no \"2pm\")\n        • Transform unclear: \"change this\" without specifying what or to what type\n\n        After receiving clarification:\n        • Merge clarification into user_request\n    </Clarification>\n\n    <!-- === OUTPUT FORMAT === -->\n    <ResponseStructure>\n        ALWAYS return this EXACT format with ALL fields present:\n        {\n        \"actions\": [\"\"],\n        \"user_request\": \"\",\n        \"parameters\": {\n        \"title\": \"\",\n        \"description\": \"\",\n        \"label\": \"\",\n        \"due_string\": \"\",\n        \"priority\": 2,\n        \"project_id\": [\"\"],\n        \"date_context\": \"\"\n        },\n        \"clarification_needed\": false,\n        \"question\": \"\"\n        }\n\n        Action Enum: create_event, update_event, search_events, create_weekly_goal, create_monthly_goal,\n        create_inbox_task, get_task, get_many_tasks, update_task, delete_task, close_task\n        Priority Values: 1, 2, 3, 4 (integers only)\n        project_id: ALWAYS array [\"\"] or [\"id1\", \"id2\"]\n    </ResponseStructure>\n\n    <Examples>\n        {\n        \"actions\": [\"create_inbox_task\"],\n        \"user_request\": \"Buy groceries today\",\n        \"parameters\": {\n        \"title\": \"Buy groceries\",\n        \"description\": \"Buy groceries\",\n        \"label\": \"personal,errands\",\n        \"due_string\": \"today\",\n        \"priority\": 2,\n        \"project_id\": [\"\"],\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false,\n        \"question\": \"\"\n        }\n\n        {\n        \"actions\": [\"update_task\"],\n        \"user_request\": \"Move review crypto card to tomorrow\",\n        \"parameters\": {\n          \"title\": \"review crypto card\",\n          \"description\": \"\",\n          \"label\": \"\",  // ← EMPTY, not inferring\n          \"due_string\": \"tomorrow\",  // ← Only what's being updated\n          \"priority\": 2,  // ← Default, not changing\n          \"project_id\": [\"\"],\n          \"date_context\": \"{{$now}}\"\n        }\n\n        {\n        \"actions\": [\"close_task\"],\n        \"user_request\": \"Mark call Dani as done\",\n        \"parameters\": {\n        \"title\": \"call Dani\",\n        \"description\": \"\",\n        \"label\": \"\",\n        \"due_string\": \"\",\n        \"priority\": 2,\n        \"project_id\": [\"\"],\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false,\n        \"question\": \"\"\n        }\n\n        {\n        \"actions\": [\"delete_task\"],\n        \"user_request\": \"Delete the meeting task\",\n        \"parameters\": {\n        \"title\": \"meeting\",\n        \"description\": \"\",\n        \"label\": \"\",\n        \"due_string\": \"\",\n        \"priority\": 2,\n        \"project_id\": [\"\"],\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false,\n        \"question\": \"\"\n        }\n\n        {\n        \"actions\": [\"search_events\", \"get_many_tasks\"],\n        \"user_request\": \"What do I have today?\",\n        \"parameters\": {\n        \"title\": \"\",\n        \"description\": \"\",\n        \"label\": \"\",\n        \"due_string\": \"today\",\n        \"priority\": 2,\n        \"project_id\": [\"\"],\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false,\n        \"question\": \"\"\n        }\n\n        {\n        \"actions\": [\"get_many_tasks\"],\n        \"user_request\": \"Show me my goals\",\n        \"parameters\": {\n        \"title\": \"\",\n        \"description\": \"\",\n        \"label\": \"\",\n        \"due_string\": \"\",\n        \"priority\": 2,\n        \"project_id\": [\"6f26m8fgVWX954hr\", \"6f26m4h5fVvr2m9c\"],\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false,\n        \"question\": \"\"\n        }\n\n        {\n        \"actions\": [\"update_event\", \"create_inbox_task\"],\n        \"user_request\": \"Convert my doctor appointment tomorrow to a task\",\n        \"parameters\": {\n        \"title\": \"Doctor appointment\",\n        \"description\": \"Doctor appointment converted to task\",\n        \"label\": \"personal\",\n        \"due_string\": \"tomorrow\",\n        \"priority\": 2,\n        \"project_id\": [\"\"],\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false,\n        \"question\": \"\"\n        }\n\n        {\n        \"actions\": [\"delete_task\", \"create_event\"],\n        \"user_request\": \"Make my meeting task an event on Friday at 2pm\",\n        \"parameters\": {\n        \"title\": \"Team meeting\",\n        \"description\": \"Team meeting converted to event\",\n        \"label\": \"work\",\n        \"due_string\": \"Friday at 2pm\",\n        \"priority\": 2,\n        \"project_id\": [\"\"],\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false,\n        \"question\": \"\"\n        }\n\n        {\n        \"actions\": [\"create_inbox_task\"],\n        \"user_request\": \"Clean house\",\n        \"parameters\": {\n        \"title\": \"Clean house\",\n        \"description\": \"Clean house\",\n        \"label\": \"personal\",\n        \"due_string\": \"\",\n        \"priority\": 2,\n        \"project_id\": [\"\"],\n        \"date_context\": \"\"\n        },\n        \"clarification_needed\": true,\n        \"question\": \"When should this be done? Today, tomorrow, this week?\"\n        }\n    </Examples>\n</AgentInstructions>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -32,
        176
      ],
      "id": "1cd93287-b184-4fa8-9ea3-fe8151a3d42d",
      "name": "Productivity Orchestrator"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {
          "frequencyPenalty": 0.2,
          "maxTokens": 1500,
          "responseFormat": "json_object",
          "presencePenalty": 0,
          "temperature": 0.1,
          "timeout": 45000,
          "maxRetries": 3,
          "topP": 0.9
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -272,
        496
      ],
      "id": "b92c3d2c-5cf2-463b-ba80-37cd75c4209e",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "fcIDL6mBCr4eAnxg",
          "name": "OpenAi voice to text"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"actions\": [\"\"],\n  \"user_request\": \"\",\n  \"parameters\": {\n    \"title\": \"\",\n    \"description\": \"\",\n    \"label\": \"\",\n    \"due_string\": \"\",\n    \"priority\": 2,\n    \"project_id\": [\"\"],\n    \"date_context\": \"\"\n  },\n  \"clarification_needed\": false,\n  \"question\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -16,
        496
      ],
      "id": "7cc26379-dc3e-443b-8d04-fa0590b9761e",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$('Telegram Trigger').item.json.message.chat.id}}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -144,
        496
      ],
      "id": "9b16ff0b-8ec1-4929-914b-d25680cc4f1f",
      "name": "Memory"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.clarification_needed }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "12636799-5a36-4c32-9f84-83fcb6557962"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "30f5ad2a-a986-468b-8918-77f23b76b6cc",
                    "leftValue": "={{ $json.output.clarification_needed }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        304,
        176
      ],
      "id": "476f5635-bff9-4e40-af2d-ea9794102870",
      "name": "Clarify"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b243cc63-7a5c-4b87-bfd2-4f2ccf569f22",
              "name": "output",
              "value": "={{ $json.output.question }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        720,
        16
      ],
      "id": "a4457590-f062-4326-b2df-9c5bd7da03ac",
      "name": "Clarification Set"
    }
  ],
  "pinData": {},
  "repo_name": "n8n",
  "repo_owner": "thalderg",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-06T09:56:34.657Z",
      "updatedAt": "2025-10-06T09:56:34.657Z",
      "role": "workflow:owner",
      "workflowId": "WHBxwz9Q2hU6tews",
      "projectId": "rwZmgF8pMPgWdXwq"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-16T15:38:45.000Z",
  "versionId": "08fe4006-5a28-4681-a3b2-49070344cdf7"
}