{
  "": "",
  "active": false,
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Search Events": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Telegram1": {
      "main": [
        []
      ]
    },
    "Create Monthly Goal in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create Inbox Task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get a task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get many tasks in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Update a Task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete a task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Close a task in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Productivity Manager": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Weekly Goal in Todoist": {
      "ai_tool": [
        [
          {
            "node": "Productivity Manager",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Productivity Orchestrator": {
      "main": [
        [
          {
            "node": "Clarify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Productivity Orchestrator",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Clarify": {
      "main": [
        [
          {
            "node": "Clarification Set",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Productivity Manager",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clarification Set": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-06T09:56:34.648Z",
  "id": "WHBxwz9Q2hU6tews",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Productivity Manager 2.0",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -768,
        144
      ],
      "id": "c8a4e514-98da-4497-adab-a45f0232571b",
      "name": "Telegram Trigger",
      "webhookId": "c1f84551-2b6d-4c83-ba8e-4a0d4cd9e16d",
      "credentials": {
        "telegramApi": {
          "id": "CtMYqp19WyE0XY9E",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "id": "ff5e1442-1f1a-412e-8b15-437d9cf3b58b"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a6d6da92-8272-4f6f-97be-7b733fc5b6d2",
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "voice"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -608,
        144
      ],
      "id": "4e590501-360e-41cb-8a8f-f86a8aa47647",
      "name": "Switch"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "13f27e1a-8d2b-4e19-afe4-ee282c5098a7",
              "name": "=text",
              "value": "={{ $json.message.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -336,
        32
      ],
      "id": "f12648fe-1d45-4889-b538-06ff157cd114",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -432,
        272
      ],
      "id": "52d8cf4b-f883-4141-9689-b911fbedc667",
      "name": "Telegram",
      "webhookId": "60c85e24-127b-4166-9353-28e9dbe6fac4",
      "credentials": {
        "telegramApi": {
          "id": "CtMYqp19WyE0XY9E",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -240,
        272
      ],
      "id": "7e651691-3750-4a11-99e6-e1df6cf0c80e",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "fcIDL6mBCr4eAnxg",
          "name": "OpenAi voice to text"
        }
      }
    },
    {
      "parameters": {
        "model": "gpt-4.1-mini",
        "options": {
          "frequencyPenalty": 0.2,
          "maxTokens": 1800,
          "presencePenalty": 0,
          "temperature": 0.1,
          "timeout": 45000,
          "maxRetries": 3,
          "topP": 0.9
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.1,
      "position": [
        128,
        560
      ],
      "id": "f7e00225-e210-4d57-ae04-93eab306a2fe",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "fcIDL6mBCr4eAnxg",
          "name": "OpenAi voice to text"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1168,
        144
      ],
      "id": "7c32ffcd-8b28-416f-8248-a06ce4b5f836",
      "name": "Telegram1",
      "webhookId": "1334d25c-b055-431f-88bf-f2e5be92a2ed",
      "credentials": {
        "telegramApi": {
          "id": "CtMYqp19WyE0XY9E",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "giopag81@gmail.com",
          "mode": "list",
          "cachedResultName": "giopag81@gmail.com"
        },
        "options": {
          "timeMin": "={{ $fromAI('StartDate','the start date and time for fetching events') }}",
          "timeMax": "={{ $fromAI('EndDate','the end date and time for fetching events') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        1136,
        528
      ],
      "id": "dadb92b1-8e9d-4945-bda7-89013ccea873",
      "name": "Search Events",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "RDxm6PWdrRguEIuu",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Creates Google Calendar Events",
        "calendar": {
          "__rl": true,
          "value": "giopag81@gmail.com",
          "mode": "list",
          "cachedResultName": "giopag81@gmail.com"
        },
        "start": "={{ $fromAI('StartDate','the start date and time for creating events') }}",
        "end": "={{ $fromAI('EndDate','the end date and time for creating events') }}",
        "additionalFields": {
          "summary": "={{ $fromAI('eventName','the name used for creating new events') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        1280,
        512
      ],
      "id": "dab8ae43-46e7-4de7-bc6c-7c41d0ab1a45",
      "name": "Create Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "RDxm6PWdrRguEIuu",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Update Google Calendar Event",
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "giopag81@gmail.com",
          "mode": "list",
          "cachedResultName": "giopag81@gmail.com"
        },
        "eventId": "={{ $fromAI('eventID','the event ID of the event needing updated') }}",
        "updateFields": {
          "end": "={{ $fromAI('updatedEnd','the updated end time and day of the event') }}",
          "start": "={{ $fromAI('updatedStart','the updated start time and day of the event') }}",
          "summary": "={{ $fromAI('eventName','the updated name of the event') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.2,
      "position": [
        1408,
        512
      ],
      "id": "0f40fafe-3403-4afa-ba1f-a1c41ee146b0",
      "name": "Update Event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "RDxm6PWdrRguEIuu",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "2360779983",
          "mode": "list",
          "cachedResultName": "Monthly Goals"
        },
        "labels": "={{ $fromAI('Label') && $fromAI('Label').trim() !== '' ? $fromAI('Label').split(',').map((s) => s.trim()) : undefined }}",
        "content": "={{ $fromAI('Content','the content or objective details of the task') }}",
        "options": {
          "description": "={{ $fromAI('Description','A short description of the task') }}",
          "dueString": "={{ $fromAI('DueString','when the task is due') }}",
          "priority": "={{ $fromAI('Priority','the priority of the task') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        528,
        592
      ],
      "id": "ce243fd4-9145-4fd6-a989-8af12ba22186",
      "name": "Create Monthly Goal in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "2360667327",
          "mode": "list",
          "cachedResultName": "Inbox"
        },
        "labels": "={{ $fromAI('Label') && $fromAI('Label').trim() !== '' ? $fromAI('Label').split(',').map((s) => s.trim()) : undefined }}",
        "content": "={{ $fromAI('Content','the content or objective details of the task') }}",
        "options": {
          "description": "={{ $fromAI('Description','A short description of the task') }}",
          "dueString": "={{ $fromAI('DueString','when the task is due') }}",
          "priority": "={{ $fromAI('Priority','the priority of the task') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        448,
        496
      ],
      "id": "e606c5ab-84df-4bf2-95a0-06dd67808b05",
      "name": "Create Inbox Task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "taskId": "={{ $fromAI('TaskId', 'The ID of the task to retrieve') }}"
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        624,
        496
      ],
      "id": "76a21016-d3f3-4c99-ad0f-c5c51baf570c",
      "name": "Get a task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "filters": {
          "projectId": "={{ $fromAI('ProjectID', 'The ID of the project') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        800,
        496
      ],
      "id": "b1a1c967-433e-4ebc-9aaa-dcde289963c7",
      "name": "Get many tasks in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "taskId": "={{ $fromAI ('TaskID', 'The ID of the task to update') }}",
        "updateFields": {
          "content": "={{ $fromAI('Content','the content or objective details of the task') }}",
          "description": "={{ $fromAI('Description','A short description of the task') }}",
          "dueString": "={{ $fromAI('DueString','when the task is due') }}",
          "labels": "={{ $fromAI('Label') && $fromAI('Label').trim() !== '' ? $fromAI('Label').split(',').map((s) => s.trim()) : undefined }}",
          "priority": "={{ $fromAI('Priority','the priority of the task from P1 to P4') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        704,
        592
      ],
      "id": "60598a06-c651-45c5-aecc-de53dc4c28e6",
      "name": "Update a Task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{ $fromAI('TaskId', 'The ID of the task to delete') }}"
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        896,
        592
      ],
      "id": "a9bf9e0c-3df6-482c-830d-5afb0a3281de",
      "name": "Delete a task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "operation": "close",
        "taskId": "={{ $fromAI('TaskId', 'The ID of the task to close') }}"
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        992,
        512
      ],
      "id": "491a809f-4ca1-4f59-8da2-28842b7614bd",
      "name": "Close a task in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "=<AgentInstructions>\n    <Role>\n        <Name>Productivity Manager Executor</Name>\n        <Description>Execute structured commands from Orchestrator. Verify all operations by fetching actual data from tools. Return real values only—never craft responses without tool confirmation.</Description>\n        <CurrentDate>{{$now}}</CurrentDate>\n    </Role>\n\n    <Goal>\n        <Primary>Execute actions with exact parameters from Orchestrator. Always verify create/update operations by fetching data. Use only real values from tool responses in output.</Primary>\n    </Goal>\n\n    <!-- === EXECUTION RULES === -->\n    <CorePrinciples>\n        • Trust Parameters: Execute exactly as Orchestrator provides—all clarifications already handled\n        • Verify Always: Fetch actual data after create/update operations\n        • Real Values Only: Never craft task IDs, dates, or status—use tool response\n        • Sequential Execution: Multi-actions in array order\n        • Rare Clarification: Only ask when tool returns error preventing execution\n    </CorePrinciples>\n\n    <ActionToolMapping>\n        Calendar:\n        • create_event → Create + search_events (verify with title/date)\n        • update_event → Update + search_events (verify)\n        • search_events → Query + return actual results\n\n        Todoist:\n        • create_weekly_goal → Create (project: 6f26m8fgVWX954hr) + get_task (verify by ID)\n        • create_monthly_goal → Create (project: 6f26m4h5fVvr2m9c) + get_task (verify by ID)\n        • create_inbox_task → Create (project: \"\") + get_task (verify by ID)\n        • update_task → Update + get_task (verify changes)\n        • close_task → Complete + get_task (verify status)\n        • get_task → Fetch single task by ID\n        • get_many_tasks → Query + return actual results\n        • delete_task → Remove (no verification needed)\n    </ActionToolMapping>\n\n    <VerificationSequence>\n        1. Execute tool with provided parameters\n        2. If create/update: Immediately fetch to verify\n        3. Use fetched data for response (task ID, due date, status, labels)\n        4. Never confirm success without tool verification\n        5. If tool fails: Report error, ask clarification ONLY if execution impossible\n    </VerificationSequence>\n\n    <!-- === CLARIFICATION RULES === -->\n    <ClarificationProtocol>\n        Orchestrator handles ALL user-facing clarifications. You receive complete, ready-to-execute commands.\n        \n        ASK user directly ONLY in extreme cases:\n        • Tool returns error requiring data not in parameters: \"API error: start_time required but not provided\"\n        • Multiple identical matches for update/delete: \"Found 3 tasks 'Meeting' on Friday. Which: 1) 9am 2) 2pm 3) 5pm?\"\n        • Tool authentication/connection failure\n        \n        99% of executions: Just execute → verify → respond with real data\n    </ClarificationProtocol>\n\n    <!-- === OUTPUT FORMAT === -->\n    <OutputFormat>\n        <CurrentDate>{{$now}}</CurrentDate>\n\n        <SingleTaskCreation>\n            \"✅ Created task: [emoji] [title from get_task]\n            Description: [description from get_task] (if exists)\n            #[labels from get_task]\n            Priority: [P1=🔴|P2=🟡|P3=🟢|P4=⚪]\n            [Status from rules]\"\n        </SingleTaskCreation>\n\n        <SingleEventCreation>\n            \"✅ Created event: 📅 [title from search_events]\n            [date/time from search_events]\n            Description: [description] (if exists)\"\n        </SingleEventCreation>\n\n        <TaskListing>\n            For each task from get_many_tasks, separate rows:\n            \"[emoji] [title]\n            Description: [description] (if exists)\n            #[label1], #[label2] (if multiple) or #[label] (if single)\n            Priority: [P1=🔴|P2=🟡|P3=🟢|P4=⚪]\n            [Status]\"\n\n            Emoji mapping:\n            • Goals/objectives: 🎯\n            • Metrics/tracking: 📈\n            • Achievements: 🏆\n            • Projects: 🚀\n            • Ideas: 💡\n            • Planning/lists: 📋\n        </TaskListing>\n\n        <EventListing>\n            For each event from search_events, separate rows:\n            \"📅 [title]\n            [date] [time]\n            Description: [description] (if exists)\"\n        </EventListing>\n\n        <StatusRules>\n            Use actual values from tool response:\n            • IF is_completed == true: \"Completed ✅\"\n            • ELSE IF due.date == {{$now}}: \"Pending ⏳\"\n            • ELSE IF due.date < {{$now}}: \"Incomplete ⚠️\"\n            • ELSE IF due.date > {{$now}}: \"[YYYY/MM/DD] 📅\"\n            • ELSE: \"Pending ⏳\"\n        </StatusRules>\n\n        <MultiActionResponse>\n            \"✅ Completed [N] actions:\n            [List each action result with format above]\"\n        </MultiActionResponse>\n\n        <ErrorResponse>\n            \"✗ Failed to [action]: [error from tool]\n            [Only ask clarification if truly blocked]\"\n        </ErrorResponse>\n    </OutputFormat>\n\n    <!-- === CRITICAL CONSTRAINTS === -->\n    <Constraints>\n        • Never fabricate task IDs, dates, or status\n        • Never confirm creation without get_task/search_events verification\n        • Use exact labels, priority, due dates from tool responses\n        • Always reference {{$now}} for date comparisons\n        • Execute only what Orchestrator commands—no interpretation needed\n        • Orchestrator already validated everything—trust the parameters completely\n    </Constraints>\n</AgentInstructions>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        656,
        272
      ],
      "id": "529c5367-7617-457d-bf14-0ef0d97e7324",
      "name": "Productivity Manager"
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "2360780016",
          "mode": "list",
          "cachedResultName": "Weekly Goals"
        },
        "labels": "={{ $fromAI('Label') && $fromAI('Label').trim() !== '' ? $fromAI('Label').split(',').map((s) => s.trim()) : undefined }}",
        "content": "={{ $fromAI('Content','the content or objective details of the task') }}",
        "options": {
          "description": "={{ $fromAI('Description','A short description of the task') }}",
          "dueString": "={{ $fromAI('DueString','when the task is due') }}",
          "priority": "={{ $fromAI('Priority','the priority of the task') }}"
        }
      },
      "type": "n8n-nodes-base.todoistTool",
      "typeVersion": 2.1,
      "position": [
        304,
        560
      ],
      "id": "693b57f2-ad2c-43b6-8404-3730d141484b",
      "name": "Create Weekly Goal in Todoist",
      "credentials": {
        "todoistApi": {
          "id": "0e5FBGaHXik0sBQC",
          "name": "Todoist account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=<AgentInstructions>\n    <Role name=\"Productivity Manager Orchestrator\">\n        <Description>Bridge between user and Productivity Manager. Convert user input to structured JSON for n8n\n            execution with context-aware clarifications.</Description>\n        <CurrentDate>{{$now}}</CurrentDate>\n    </Role>\n\n    <Goal>Convert user input into deterministic JSON actions for Todoist and Calendar operations, ensuring outputs\n        reference {{$now}} to avoid date hallucinations.</Goal>\n\n    <!-- === CORE LOGIC === -->\n    <ActionTypes>\n        • Tasks: \"add task\", \"todo\", \"buy\", \"clean\", \"complete\", \"finish\"\n        • Calendar: \"appointment\", \"meeting\", \"call with\", \"visit\", \"event\", times (2pm, 3:30)\n        • Goals: \"weekly goal\", \"monthly goal\", \"by end of week/month\", \"achieve\"\n        • Queries: \"what do I have\", \"what's today/tomorrow\", \"show me\", \"what goals\"\n        • Transform: \"change event to task\", \"make this a calendar event\", \"convert to task\"\n    </ActionTypes>\n\n    <ProjectRouting>\n        • Weekly (≤7 days) → \"6f26m8fgVWX954hr\"\n        • Monthly (≤30 days) → \"6f26m4h5fVvr2m9c\"\n        • Inbox/daily/specific date → \"\"\n        • All goals query → [\"6f26m8fgVWX954hr\", \"6f26m4h5fVvr2m9c\"]\n    </ProjectRouting>\n\n    <MultiActionRules>\n        • Date queries (\"what's today/tomorrow/Friday\") → [\"search_events\", \"get_many_tasks\"] with project_id: \"\"\n        • Goal queries (\"what goals\") → [\"get_many_tasks\"] with project_id: [\"6f26m8fgVWX954hr\", \"6f26m4h5fVvr2m9c\"]\n        • Event→Task transform → [\"update_event\", \"create_inbox_task\"]\n        • Task→Event transform → [\"delete_task\", \"create_event\"]\n    </MultiActionRules>\n\n    <Labels>\n        work, personal, crypto, ai, health, fitness, urgent, routine, phone, computer, errands, waiting\n        Format: Single \"personal\" | Multiple \"work,urgent\"\n    </Labels>\n\n    <Priority>\n        User: P1|urgent → 4, P2|high → 3, P3|medium → 2, P4|low → 1\n        Default: 2 (medium)\n    </Priority>\n\n    <!-- === CLARIFICATION RULES === -->\n    <Clarification>\n        ASK when:\n        • Missing timing: \"add task\" without WHEN\n        • Vague timing: \"later\", \"soon\", \"sometime\"\n        • Task/calendar ambiguous: \"appointment tomorrow\"\n        • Calendar missing time: \"meeting Friday\" (no \"2pm\")\n        • Transform unclear: \"change this\" without specifying what or to what type\n\n        Examples:\n        \"Add task clean house\" → ASK: \"When should this be done?\"\n        \"Meeting Friday\" → ASK: \"What time should this be scheduled?\"\n        \"Buy groceries today\" → NO ASK: Clear timing\n        \"Meeting at 2pm Friday\" → NO ASK: Complete details\n        \"Transform this event\" → ASK: \"Which event? Should I convert it to a task?\"\n    </Clarification>\n\n    <!-- === OUTPUT FORMAT === -->\n    <ResponseStructure>\n        Single action:\n        {\n        \"action\": \"[from_action_enum]\",\n        \"parameters\": {...},\n        \"clarification_needed\": boolean,\n        \"question\": \"string\"\n        }\n\n        Multiple actions:\n        {\n        \"actions\": [\"action1\", \"action2\"],\n        \"parameters\": {...},\n        \"clarification_needed\": boolean,\n        \"question\": \"string\"\n        }\n\n        Action Enum: create_event, update_event, search_events, create_weekly_goal, create_monthly_goal,\n        create_inbox_task, get_task, get_many_tasks, update_task, delete_task, close_task\n        Priority Values: 1, 2, 3, 4 (integers only)\n    </ResponseStructure>\n\n    <Examples>\n        <!-- Single action: Create task -->\n        {\n        \"action\": \"create_inbox_task\",\n        \"parameters\": {\n        \"title\": \"Buy groceries\",\n        \"label\": \"personal,errands\",\n        \"due_string\": \"today\",\n        \"priority\": 2,\n        \"project_id\": \"\",\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false\n        }\n\n        <!-- Task needing clarification -->\n        {\n        \"action\": \"create_inbox_task\",\n        \"parameters\": {\"title\": \"Clean house\"},\n        \"clarification_needed\": true,\n        \"question\": \"When should this be done? Today, tomorrow, this week?\"\n        }\n\n        <!-- Calendar event needing time -->\n        {\n        \"action\": \"create_event\",\n        \"parameters\": {\"title\": \"Doctor appointment\", \"due_string\": \"tomorrow\"},\n        \"clarification_needed\": true,\n        \"question\": \"What time should this appointment be scheduled?\"\n        }\n\n        <!-- Multi-action: Date query -->\n        {\n        \"actions\": [\"search_events\", \"get_many_tasks\"],\n        \"parameters\": {\n        \"due_string\": \"today\",\n        \"project_id\": \"\",\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false\n        }\n\n        <!-- Multi-action: Goals query -->\n        {\n        \"actions\": [\"get_many_tasks\"],\n        \"parameters\": {\n        \"project_id\": [\"6f26m8fgVWX954hr\", \"6f26m4h5fVvr2m9c\"],\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false\n        }\n\n        <!-- Multi-action: Transform event to task -->\n        {\n        \"actions\": [\"update_event\", \"create_inbox_task\"],\n        \"parameters\": {\n        \"title\": \"Call Janny\",\n        \"date_context\": \"{{$now}}\"\n        },\n        \"clarification_needed\": false\n        }\n    </Examples>\n</AgentInstructions>"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -32,
        160
      ],
      "id": "1cd93287-b184-4fa8-9ea3-fe8151a3d42d",
      "name": "Productivity Orchestrator"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {
          "frequencyPenalty": 0.2,
          "maxTokens": 1500,
          "responseFormat": "json_object",
          "presencePenalty": 0,
          "temperature": 0.1,
          "timeout": 45000,
          "maxRetries": 3,
          "topP": 0.9
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -272,
        496
      ],
      "id": "b92c3d2c-5cf2-463b-ba80-37cd75c4209e",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "fcIDL6mBCr4eAnxg",
          "name": "OpenAi voice to text"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"actions\": [\"\"],\n  \"parameters\": {\n    \"title\": \"\",\n    \"description\": \"\",\n    \"label\": \"\",\n    \"due_string\": \"\",\n    \"priority\": 2,\n    \"project_id\": [\"\"],\n    \"date_context\": \"\"\n  },\n  \"clarification_needed\": false,\n  \"question\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -16,
        496
      ],
      "id": "7cc26379-dc3e-443b-8d04-fa0590b9761e",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$('Telegram Trigger').item.json.message.chat.id}}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -144,
        496
      ],
      "id": "9b16ff0b-8ec1-4929-914b-d25680cc4f1f",
      "name": "Memory"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.clarification_needed }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "12636799-5a36-4c32-9f84-83fcb6557962"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "30f5ad2a-a986-468b-8918-77f23b76b6cc",
                    "leftValue": "={{ $json.output.clarification_needed }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "false",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        304,
        160
      ],
      "id": "476f5635-bff9-4e40-af2d-ea9794102870",
      "name": "Clarify"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b243cc63-7a5c-4b87-bfd2-4f2ccf569f22",
              "name": "output",
              "value": "={{ $json.output.question }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        720,
        16
      ],
      "id": "a4457590-f062-4326-b2df-9c5bd7da03ac",
      "name": "Clarification Set"
    }
  ],
  "pinData": {},
  "repo_name": "n8n",
  "repo_owner": "thalderg",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-06T09:56:34.657Z",
      "updatedAt": "2025-10-06T09:56:34.657Z",
      "role": "workflow:owner",
      "workflowId": "WHBxwz9Q2hU6tews",
      "projectId": "rwZmgF8pMPgWdXwq"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-15T14:10:35.000Z",
  "versionId": "82fb5cd3-2a18-46ae-ab0d-e2dc62f0d3eb"
}