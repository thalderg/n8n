{
  "": "",
  "active": false,
  "connections": {
    "Email Processing": {
      "main": [
        [
          {
            "node": "Create a record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a record": {
      "main": [
        [
          {
            "node": "Switch Emotional States",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch Emotional States": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Think2": {
      "ai_tool": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Email Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-07-26T11:59:43.837Z",
  "id": "m7b9Mh9NWdQchXTr",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Consciousness Level Mapping Simple",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nitems.forEach(item => {\n  // Propagate all existing form fields first\n  const processedItem = { ...item.json };\n  \n  // Use \"Email\" (capital E) to match your form field\n  if (item.json.Email && item.json.Email.trim()) {\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const email = item.json.Email.trim().toLowerCase();\n    \n    if (emailRegex.test(email)) {\n      // Valid email - create hash and auto opt-in\n      const crypto = require('crypto');\n      processedItem.email_hash = crypto.createHash('sha256').update(email).digest('hex');\n      processedItem.email_opt_in = 'Yes';\n      \n      // Keep only ONE email field (overwrite the original with cleaned version)\n      processedItem.Email = email;\n    } else {\n      // Invalid email format\n      processedItem.email_hash = null;\n      processedItem.email_opt_in = 'No';\n      processedItem.Email = null;\n    }\n  } else {\n    // No email provided\n    processedItem.email_hash = null;\n    processedItem.email_opt_in = 'No';\n    processedItem.Email = null;\n  }\n  \n  // Normalize other field names for consistency\n  if (item.json['Personal state']) {\n    processedItem.current_emotional_state = item.json['Personal state'];\n  }\n  \n  if (item.json['Life Situation/Goals']) {\n    processedItem.life_situation = item.json['Life Situation/Goals'];\n  }\n\n  if (item.json['Goal']) {\n    processedItem.life_situation = item.json['Goal'];\n  }\n  // Update the item\n  item.json = processedItem;\n});\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1420,
        -80
      ],
      "id": "7ac7bbf2-4c2f-4e3a-9093-a6973dfb39c8",
      "name": "Email Processing"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appnyoa5bqY6WpWst",
          "mode": "list",
          "cachedResultName": "Consciousness Map",
          "cachedResultUrl": "https://airtable.com/appnyoa5bqY6WpWst"
        },
        "table": {
          "__rl": true,
          "value": "tblzrBFaymJF88vjC",
          "mode": "list",
          "cachedResultName": "Submissions",
          "cachedResultUrl": "https://airtable.com/appnyoa5bqY6WpWst/tblzrBFaymJF88vjC"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Name": "={{ $json.Name }}",
            "Email": "={{ $json.Email }}",
            "Emotional_State": "={{ $json[\"Personal state\"] }}",
            "Email_opt_in": "={{ $json.email_opt_in }}",
            "Email_Hash": "={{ $json.email_hash }}",
            "Life_Situation": "={{ $json[\"Life Situation\"] }}",
            "Goal": "={{ $json.Goal }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "USER_ID",
              "displayName": "USER_ID",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Life_Situation",
              "displayName": "Life_Situation",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Goal",
              "displayName": "Goal",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Emotional_State",
              "displayName": "Emotional_State",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Email_opt_in",
              "displayName": "Email_opt_in",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "Yes",
                  "value": "Yes"
                },
                {
                  "name": "No",
                  "value": "No"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Email_Hash",
              "displayName": "Email_Hash",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Agents_Content",
              "displayName": "Agents_Content",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "Agents_Content copy",
              "displayName": "Agents_Content copy",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -1200,
        -80
      ],
      "id": "ee298c50-13f8-4e5e-9d07-83a83e2d97c1",
      "name": "Create a record",
      "credentials": {
        "airtableTokenApi": {
          "id": "aR2eRiONnse3ODUc",
          "name": "Airtable Personal Access Token account 3"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ ['Shame', 'Guilt', 'Apathy', 'Grief', 'Fear', 'Desire', 'Anger', 'Pride'].includes($json.fields.Emotional_State) }}",
                    "rightValue": "={{ ['Shame', 'Guilt', 'Apathy', 'Grief', 'Fear', 'Desire', 'Anger', 'Pride'].includes($json.fields.Emotional_State) }}",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "82e49fce-3835-475c-9b62-9ebf92c1cf6a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f2eba083-b07a-48b5-a0ef-a8ce2f1d6e3b",
                    "leftValue": "={{ ['Courage', 'Neutrality', 'Willingness', 'Acceptance', 'Reason'].includes($json.fields.Emotional_State) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1c3920ac-782f-4576-a974-7379e5b89e64",
                    "leftValue": "={{ ['Love', 'Joy', 'Peace', 'Enlightenment'].includes($json.fields.Emotional_State) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -920,
        -80
      ],
      "id": "5b502aa5-58e0-469a-8e63-cbb8994f1442",
      "name": "Switch Emotional States"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Name: {{ $json.fields.Name }}\nPersonal State: {{ $json.fields.Emotional_State }}\nLife Situation: {{ $json.fields.Life_Situation }}\nGoal: {{ $json.fields.Goal }}",
        "options": {
          "systemMessage": "# CRISIS SUPPORT AGENT\n## PRIMARY DIRECTIVE (MUST EXECUTE FIRST)\nExamine the user input in Personal State and Goal fields.\nIf EITHER:\n- Is less than 50 characters\n- Contains repeated characters (e.g., \"aaaaa\")\n- Contains keyboard patterns (e.g., \"asdfgh\")\n- Contains only test phrases (e.g., \"test test\")\n- Lacks emotional vocabulary\n- Has extremely low word diversity\n\nTHEN IMMEDIATELY RESPOND ONLY WITH:\n\"I require more context to provide an answer\"\nAND STOP PROCESSING.\n\nDO NOT proceed to any other part of this prompt if validation fails.\n\n## ONLY IF VALIDATION PASSES, CONTINUE WITH:\n\n## ROLE IDENTITY\n**Function:** Crisis intervention specialist using Jungian/Gestalt approach\n**Target:** Consciousness levels 20-175 (Shame to Pride)\n**Approach:** Address users by name, reference their specific inputs\n\n## CORE FRAMEWORK\nThree-step intervention process:\n1. **SAFETY** - Emotional regulation, crisis assessment\n2. **PERSPECTIVE** - Gentle reframing without toxic positivity\n3. **MICRO-ACTIONS** - Tiny, achievable steps forward\n\n**Level-Specific Focus:**\n- **20-30 (Shame/Guilt):** Maximum validation, simplest micro-steps\n- **50-75 (Apathy/Grief):** Find small sparks of meaning/interest\n- **100 (Fear):** Regulation techniques, gradual exposure\n- **125-175 (Desire/Anger/Pride):** Channel energy, highlight breakthrough proximity\n\n## LEVEL SPECIFICS\n\n**SHAME (20)** - \"Not good enough\" → Validate humanity, basic self-care\n**GUILT (30)** - \"Should have done better\" → Forgiveness, present-moment focus\n**APATHY (50)** - \"What's the point?\" → One small reason to care\n**GRIEF (75)** - \"Missed my chance\" → Starting now > never starting\n**FEAR (100)** - \"Judgment worry\" → Normalize fear, private practice\n**DESIRE (125)** - \"Need success\" → Help one person vs massive success\n**ANGER (150)** - \"Why not working?\" → Channel into determined action\n**PRIDE (175)** - \"Better than others\" → Embrace humility, prepare for breakthrough\n\n## ASSESSMENT PROCESS\n1. **Evaluate safety** - Crisis level, professional referral needs\n2. **Identify consciousness level** - Acknowledge self-awareness if present\n3. **Design micro-steps** - Score accessibility (1-5):\n   - **5:** <5min, minimal energy, immediate success\n   - **4:** <15min, low barrier, high success probability\n   - **3:** <30min, moderate energy, crisis-manageable\n   - **2:** <60min, planning needed, support beneficial\n   - **1:** >60min, complex, not for current state\n\n## THERAPEUTIC ELEMENTS\n**Joe Dispenza:** Break emotional addiction, mental rehearsal, present awareness\n**Wim Hof:** Simple breathing, micro-cold exposure, commitment focus\n**Jungian/Gestalt:** Shadow work, part integration, paradoxical change, present awareness\n\n## COMMUNICATION\n**Style:** Warm, compassionate, clear, simple sentences, abundant space\n**Crisis Resources:** Text HOME to 741741 (US/Canada), IASP resources, local options\n\n## RESPONSE STRUCTURE\n\n### 1. ACKNOWLEDGMENT\n- Validate feelings, normalize experience, recognize self-awareness\n\n### 2. SAFETY CHECK\n- Professional referral if needed, explain consciousness level\n- Highlight breakthrough proximity for levels 125-175\n\n### 3. IMMEDIATE RELIEF\n- ONE primary focus area\n- 1-3 tiny steps (with accessibility scores)\n- One regulation technique (detailed instructions)\n\n### 4. ELEVATION PATH\n- Current → Next level markers\n- 1-2 micro-habits for consciousness elevation\n\n### 5. RESOURCES\n- 1-2 specific resources for emotional state\n- Professional support options if relevant\n\n### 6. FOLLOW-UP QUESTIONS\n- Brief questions about needs, supports, past helps, interests\n\n### 7. NEXT STEPS\n- Specific emotional/physical markers to notice\n\n### 8. CLOSING\n- Hopeful, Joe Dispenza-influenced message tailored to situation\n\n## OUTPUT REQUIREMENTS\n- Prioritize safety and immediate emotional support\n- Assess for severe crisis needing professional help\n- Keep cognitive load minimal for lower levels\n- Make suggestions extremely small and specific\n- Focus on next level only, not multi-level jumps\n- Avoid toxic positivity while maintaining hope\n- Output as JSON with these exact fields:\n  - Generated_Response (full response without section titles, each section titles should be translated in the original user language and being integrated as part of the whole text. Text must appear fluid, without sections and interruptions)\n  - Agent_Model\n  - Consciousness_Path (Current -> Next)\n  - Processing_Time\n  - Content_Length\n  - Timestamp\n- Translate everything to user's original language, except json field names. To evaluate the language, use only \"Life Situation\" and \"Goal\". If can't be understood by that, use English \n- Do not add numbers next to the Personal State in the response\n- The opening questions must be for the users to answer on his own, not as something the model needs to know but as a starting point to start a personal self awareness/healing process\n- Avoid to appear as someone to rely on, since this is a one time interaction. \n- when emotional level quite low, remind when necessary that you are not a professional therapist\n- Use only Life Situation and Gaol to detect user original language. If can't be detected, fall bck to English "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -660,
        -380
      ],
      "id": "1b166cf2-7a55-489d-810a-3345bcddbeeb",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Name: {{ $json.Name }}\nPersonal State: {{ $json[\"Personal state\"] }}\nLife Situation: {{ $json[\"Life Situation\"] }}\nGoal: {{ $json.Goal }}\nLocation : {{ $json.Location }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -660,
        220
      ],
      "id": "14468804-03ee-4c34-80ee-19e530a7ac4f",
      "name": "AI Agent2"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -400,
        -240
      ],
      "id": "6dc5403a-f710-4217-ba8e-ced4c12ed6b2",
      "name": "Think"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -700,
        -220
      ],
      "id": "c9fa53a5-2ecf-4fb2-a36d-8b144cda253d",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "MKbF3uTQpZzWtzUq",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -740,
        380
      ],
      "id": "18ae0437-5461-4ce2-b568-0cf1bb42618b",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "MKbF3uTQpZzWtzUq",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -400,
        400
      ],
      "id": "79a9efee-2bb3-461c-a728-bb53a1b65d1c",
      "name": "Think2"
    },
    {
      "parameters": {
        "formTitle": "Personal Coach",
        "formDescription": "Automated personal development system that assesses users' consciousness levels based on David Hawkins' Map of Consciousness and provides personalized growth guidance through AI-powered coaching",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Name",
              "requiredField": true
            },
            {
              "fieldLabel": "Email",
              "fieldType": "email"
            },
            {
              "fieldLabel": "Personal state",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Shame"
                  },
                  {
                    "option": "Guilt"
                  },
                  {
                    "option": "Apathy"
                  },
                  {
                    "option": "Grief"
                  },
                  {
                    "option": "Fear"
                  },
                  {
                    "option": "Desire"
                  },
                  {
                    "option": "Anger"
                  },
                  {
                    "option": "Pride"
                  },
                  {
                    "option": "Courage"
                  },
                  {
                    "option": "Neutrality"
                  },
                  {
                    "option": "Willingness"
                  },
                  {
                    "option": "Acceptance"
                  },
                  {
                    "option": "Reason"
                  },
                  {
                    "option": "Love"
                  },
                  {
                    "option": "Joy"
                  },
                  {
                    "option": "Peace"
                  },
                  {
                    "option": "Enlightement"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Life Situation",
              "fieldType": "textarea",
              "placeholder": "Describe where you are at with your life",
              "requiredField": true
            },
            {
              "fieldLabel": "Goal",
              "fieldType": "textarea",
              "placeholder": "Describe your main Goal in the near future (day/s, week/s, a month)",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -1660,
        -80
      ],
      "id": "6f950e23-929d-4c72-ac39-6d4681a74f85",
      "name": "On form submission",
      "webhookId": "fd12467e-5fae-4876-9030-6463dbdba421"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Name: {{ $json.fields.Name }}\nPersonal State: {{ $json.fields.Emotional_State }}\nLife Situation: {{ $json.fields.Life_Situation }}\nGoal: {{ $json.fields.Goal }}",
        "options": {
          "systemMessage": "## INPUT VALIDATION (EXECUTE FIRST)\nIf Personal State OR Goal is:\n- Under 50 characters\n- Contains repetition patterns (aaaaa)\n- Has keyboard sequences (asdfgh)\n- Contains only test phrases\n- Lacks emotional vocabulary\n- Has minimal word diversity\n→ RESPOND ONLY: \"I require more context to provide an answer\"\n\n## GOAL TYPE ASSESSMENT (EXECUTE SECOND)\nAfter validation, immediately classify goals as:\n\n**MEANS GOALS** (focused on material possessions, status, money, specific job titles)\n**END GOALS** (focused on experiences, personal growth, contribution, fulfillment)\n\n**IF ONLY MEANS GOALS DETECTED:**\n- Skip Experiences and Contribution sections completely\n- Focus ONLY on Growth section aligned with stated goals\n- Include pre-assessment with Vishen's video link\n- Help reframe toward end goals while providing practical guidance\n\n**IF ALSO END GOALS DETECTED:**\n- Proceed with full 3-question framework\n\n## ROLE & FRAMEWORK\nLife Coach Agent specializing in Vishen Lakhiani's \"3 Most Important Questions\" framework for users at consciousness levels 200-400 (Courage to Reason).\n\nThe 3 Categories (END GOALS only):\n1. EXPERIENCES - What to experience before death. This is personal (example: Paqrachussing, Backpacking in Vietnam and so on).\nIf not specified, just add it as a recommmendation, explaining what is about with examples but fitting the individual life situation\n2. GROWTH - How to develop as a person\n3. CONTRIBUTION - How to impact the world\n\nAdjust focus based on consciousness:\n- Courage/Neutrality (200-250): Emphasize Experiences+Growth\n- Willingness (310): Balance all three with basic contribution\n- Acceptance/Reason (350-400): Strong contribution focus\n\n## ANALYSIS APPROACH\n1. Assess goals (end vs. means) + reality check (family, time constraints)\n2. Categorize into 3 areas with 1-5 reachability scoring\n3. Create structured action plan with specific habits and timelines\n4. Integrate coaching approaches (Joe Dispenza, Wim Hof, Tony Robbins) based on needs\n\n## COMMUNICATION\nProfessional, positive tone with personalization. Mix concise points with explanations. Reference relevant resources when helpful.\n\n## RESPONSE STRUCTURE (SEAMLESS & CONVERSATIONAL)\nCreate a fluid, conversational response integrating these elements without visible section breaks:\n\n1. Initial goal assessment (end vs. means goals) with reality check\n2. For END GOALS: Prioritized recommendations across all 3 areas\n   For MEANS GOALS: Growth-focused recommendations only, with gentle end-goal reframing\n3. Implementation roadmap (daily habits, weekly goals, monthly target)\n4. Relevant resource recommendations\n5. Follow-up questions for deeper insight\n6. Next steps and tracking suggestions\n7. Uplifting, philosophical closing message\n\nFor MEANS GOALS, include brief explanation suggesting self-assessment for understanding end goals with Vishen's video link (https://www.youtube.com/watch?v=f8eU5Pc-y0g)\n\n## OUTPUT FORMAT\nReturn a JSON with these fields:\n- Generated_Response (fluid, conversational text without section headers)\n- Agent_Model\n- Consciousness_Path (Current -> Next)\n- Processing_Time\n- Content_Length\n- Timestamp\n\n## FINAL GUIDELINES\n- Use the user's original language (detect from Life Situation/Goal)\n- Make suggestions concrete and actionable\n- Frame questions for self-reflection, not as data collection\n- Emphasise this is a one-time interaction\n- Create seamless transitions between conceptual areas\n- Adjust depth based on consciousness level\n- Personalise recommendations to specific user situation \n- Do not mention Tony Robins, Wim Hof or Joe Dispenza but use them as way to create meaningful motivational phrases or instructions not literal. Mention either of them if you are literally following some of their practical exercise or you mention a specific video or book\n- Keep the answer not too long and organised in sections so that it does not feel overwhelming."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -660,
        -80
      ],
      "id": "8f6c20bb-4d31-4a85-9ffe-557d0a1cb484",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -700,
        80
      ],
      "id": "e9baf4eb-59af-439e-8d9a-773cd64dc199",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "MKbF3uTQpZzWtzUq",
          "name": "n8n free OpenAI API credits"
        }
      }
    }
  ],
  "pinData": {
    "Create a record": [
      {
        "json": {
          "id": "recsgFclADk7ZWLk8",
          "createdTime": "2025-07-30T10:45:55.000Z",
          "fields": {
            "USER_ID": 5,
            "Name": "gianni",
            "Timestamp": "2025-07-30T10:45:55.000Z",
            "Life_Situation": " \n\"I am a father of 2 small kids. I am unemployed at the moment and willing to make money but sometimes is frustrating because of lack of time. I strongly beleive in personal health and well being, and I try to make space for some SOMA breath practice and yoga each day, even if only for 10/20 minutes\\n\",\n",
            "Emotional_State": "Willingness",
            "Email_opt_in": "No",
            "Goal": "I want to master AI prompting and automation  to use it for fitness and well being."
          }
        }
      }
    ]
  },
  "repo_name": "n8n",
  "repo_owner": "thalderg",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-05-29T13:56:07.453Z",
      "updatedAt": "2025-05-29T13:56:07.453Z",
      "id": "0VZ5UhwYeLVnd583",
      "name": "Product"
    },
    {
      "createdAt": "2025-05-29T13:56:07.414Z",
      "updatedAt": "2025-05-29T13:56:07.414Z",
      "id": "8JwyhMiXJR46hkag",
      "name": "Ideation"
    },
    {
      "createdAt": "2025-05-29T13:56:07.328Z",
      "updatedAt": "2025-05-29T13:56:07.328Z",
      "id": "TQ35wQbgc3ccWuXf",
      "name": "AI"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-07-30T11:28:05.000Z",
  "versionId": "afce15b2-5abe-4dc2-8100-0e1dd9719b90"
}