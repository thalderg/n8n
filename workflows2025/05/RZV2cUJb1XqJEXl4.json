{
  "": "",
  "active": true,
  "connections": {
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Flows": {
      "main": [
        [
          {
            "node": "Has Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Completed Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Starting Message": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Failed Flows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Completed Notification": {
      "main": [
        []
      ]
    },
    "Has Error": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-19T10:24:27.744Z",
  "id": "RZV2cUJb1XqJEXl4",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "GitHub",
  "nodes": [
    {
      "parameters": {},
      "id": "f8ae9da5-3232-4c9b-83e3-19507cc72648",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        500,
        80
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 731.7039821513649,
        "width": 1910.7813046051347,
        "color": 6
      },
      "id": "ebc477c3-c77a-4341-b658-1511eb3c3107",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        20,
        460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "acb4887b-e718-45b1-bc94-7c97acfe5d20",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        900,
        180
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "tSjuRbQlwFkyGvnn",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "c578510f-6f8a-4a34-b325-147dc278efda",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        1740,
        660
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "73471568-92e2-4b32-a5a0-5d6648306e65",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        700,
        540
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "f1de4ebd-6f2b-4253-84ba-7a14ac27a102",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        460,
        560
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "93506711-9ab9-4a42-806b-239de5b03c6b",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        500,
        820
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "6e1748e7-bd27-4cd3-9875-1be34092c497",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        660,
        820
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "73fb70c0-68c9-4289-8726-428b4629a1dd",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1060,
        820
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "46140b68-2cd5-459a-899f-df6700224e26",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1280,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "b8fbe1be-7f3c-47b7-a4c3-0d39388b56aa",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1280,
        820
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "17374d60-5ff4-45f0-b6f0-e2ce443a12e3",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1280,
        1020
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').first().json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').first().json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').first().json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "81725010-1caf-4e1a-9c6b-c7b588c07ab7",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1500,
        1020
      ],
      "typeVersion": 1,
      "webhookId": "31add90f-4c7c-4d51-a282-afa5f697a7f2",
      "credentials": {
        "githubOAuth2Api": {
          "id": "MYuGwwAkLK2Ho4kz",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').first().json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').first().json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').first().json.repo_path }}{{ $json.subPath }}{{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "f1abeb2a-eb54-49b7-a071-23cf57bf2f40",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1500,
        820
      ],
      "typeVersion": 1,
      "webhookId": "1961ecd0-1288-41ce-a181-d2a6520ccc66",
      "credentials": {
        "githubOAuth2Api": {
          "id": "MYuGwwAkLK2Ho4kz",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "31efc981-368f-4309-b7d2-8de52ed1a6a3",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1100,
        180
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "0eac4422-6cfa-48b8-8263-05b5117f7875",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        500,
        280
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "82c5797c-3f1a-4ca2-b82b-cd968bbeaf36",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        860,
        820
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "f67c3573-8df4-49ee-b52d-c8cfbfccbc6e",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        20,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416,
        "width": 1573,
        "color": 7
      },
      "id": "7579afb8-afe9-4902-878b-b600a307458c",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "#all-n8n",
          "mode": "name"
        },
        "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "08abd7a8-c822-4bf4-9a08-382998aa30fd",
      "name": "Starting Message",
      "type": "n8n-nodes-base.slack",
      "position": [
        740,
        180
      ],
      "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "IbhDIYnl1Z26PUUh",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "#all-n8n",
          "mode": "name"
        },
        "text": "=={{ $json.hasError\n  ? \"⚠️ Backup completed with issues - \" + $('n8n').all().length + \" workflows processed, some encountered errors.\"\n  : \"✅ Backup has completed successfully - \" + $('n8n').all().length + \" workflows have been processed.\" }}",
        "otherOptions": {}
      },
      "id": "b5069d63-e792-480e-a509-1780105d8940",
      "name": "Completed Notification",
      "type": "n8n-nodes-base.slack",
      "position": [
        1320,
        20
      ],
      "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
      "executeOnce": true,
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "IbhDIYnl1Z26PUUh",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "#all-n8n",
          "mode": "name"
        },
        "text": "==:x: Failed to backup {{ $('Loop Over Items').item.json.id }} ({{ $('Loop Over Items').item.json.name }})\n\n*Error Details:*\n{{ $json.errorDetails.errorMessage }}\n\n*Last Node Executed:*\n{{ $json.errorDetails.lastNode }}\n\n*Links:*\n<{{ $json.errorDetails.workflowURL }}|View Workflow> | <{{ $json.errorDetails.executionURL }}|View Execution>",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "1c9c39cd-b7f9-4674-89aa-558cc610ffa5",
      "name": "Failed Flows",
      "type": "n8n-nodes-base.slack",
      "position": [
        1660,
        200
      ],
      "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "IbhDIYnl1Z26PUUh",
          "name": "Slack account 2"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').first().json.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').first().json.repo_name }}",
          "mode": ""
        },
        "filePath": "={{ $('Config').first().json.repo_path }}{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/{{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "389801f8-62f2-4c94-9185-b01789d7155a",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        260,
        560
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "webhookId": "f7b81f52-70a0-4acb-bf61-0715237028b0",
      "credentials": {
        "githubOAuth2Api": {
          "id": "MYuGwwAkLK2Ho4kz",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "=thalderg"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "=n8n"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "=workflows"
            },
            {
              "id": "1ea90d41-4ca8-41a4-b644-658a2eab8147",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "f6c966e3-97b5-4a62-85b4-923422e0f1b4",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        260,
        840
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "={{ $workflow.id }}",
          "mode": "id"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1300,
        180
      ],
      "id": "91ee001b-ace3-4244-8365-b26374f11e0f",
      "name": "Execute Workflow1",
      "onError": "continueErrorOutput",
      "notes": "if there is an error, continues and pass it on slack"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        60,
        840
      ],
      "id": "47c55ad8-588f-427d-92b6-a375d76d8c2e",
      "name": "Execute Workflow Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Check if the input has error information\nif ($input.item.json.error || $input.item.json.lastNodeExecuted) {\n  // Create a rich error object\n  $input.item.json.errorDetails = {\n    lastNode: $input.item.json.lastNodeExecuted || \"Unknown\",\n    errorMessage: $input.item.json.error || \"Unknown error\",\n    workflowId: $workflow.id,\n    executionId: $execution.id,\n    workflowURL: `https://gioben.app.n8n.cloud/workflow/${$workflow.id}`,\n    executionURL:   `https://gioben.app.n8n.cloud/workflow/${$workflow.id}/executions/${$execution.id}`\n  };\n}\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1480,
        200
      ],
      "id": "b67efe13-b17d-4d5d-955c-69aedcdace73",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e7043922-7293-4844-bd46-86b5043b22da",
              "name": "hasError",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1840,
        200
      ],
      "id": "3f644648-5cb4-4161-990e-3623deb31992",
      "name": "Has Error"
    }
  ],
  "pinData": {},
  "repo_name": "n8n",
  "repo_owner": "thalderg",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-05-19T10:24:27.749Z",
      "updatedAt": "2025-05-19T10:24:27.749Z",
      "role": "workflow:owner",
      "workflowId": "RZV2cUJb1XqJEXl4",
      "projectId": "rwZmgF8pMPgWdXwq"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-05-20T09:31:36.000Z",
  "versionId": "ccfaffef-077d-482e-ae9a-dbfe3ad1a50a"
}