{
  "": "",
  "active": false,
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Trigig Head Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trisig Portfolio Scraper": {
      "main": [
        [
          {
            "node": "Extract Portfolio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updated etag?": {
      "main": [
        [
          {
            "node": "No Updates?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigig Head Data": {
      "main": [
        [
          {
            "node": "Updated etag?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare and Update": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Add?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Remove?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Remove",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notion Manual Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve Previous Portofolio": {
      "main": [
        [
          {
            "node": "Convert To Portfolio json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append Inputs": {
      "main": [
        [
          {
            "node": "Compare and Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Portfolio": {
      "main": [
        [
          {
            "node": "Transform Portfolio into Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Portfolio into Items": {
      "main": [
        [
          {
            "node": "Format Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Date": {
      "main": [
        [
          {
            "node": "Append Inputs",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Format Date1": {
      "main": [
        [
          {
            "node": "Append Inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add?": {
      "main": [
        [
          {
            "node": "Add",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notion Manual Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove?": {
      "main": [
        [
          {
            "node": "Notion Manual Updates",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Remove",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Updates?": {
      "main": [
        [
          {
            "node": "No Updates Then Stop",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Trisig Portfolio Scraper",
            "type": "main",
            "index": 0
          },
          {
            "node": "Retrieve Previous Portofolio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add": {
      "main": [
        [
          {
            "node": "Adds",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove": {
      "main": [
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Updates": {
      "main": [
        []
      ]
    },
    "Convert To Portfolio json": {
      "main": [
        [
          {
            "node": "Format Date1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Manual Updates": {
      "main": [
        [
          {
            "node": "Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compare Datasets1": {
      "main": [
        [
          {
            "node": "Remove1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Updates Then Stop1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notion Manual Updates1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add1": {
      "main": [
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Adds1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Manual Updates1": {
      "main": [
        [
          {
            "node": "Updates1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove1": {
      "main": [
        [
          {
            "node": "Discord1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-05-20T10:24:18.665Z",
  "id": "IKuBj6sIctF8oPgQ",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Trisig Portfolio",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -400,
        -660
      ],
      "id": "5b0a4ab5-f4f7-48af-a077-3292ab51e20b",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://production-sfo.browserless.io/content",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "blockAds",
              "value": "true"
            },
            {
              "name": "stealth",
              "value": "true"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"url\": \"https://trisigma.ai/portfolio\",\n  \"gotoOptions\": {\n    \"waitUntil\": \"networkidle0\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -100,
        -180
      ],
      "id": "34af0f10-2591-4ac8-8816-626e5b927c01",
      "name": "Trisig Portfolio Scraper",
      "credentials": {
        "httpHeaderAuth": {
          "id": "L2msUDZsWDkE7k48",
          "name": "Header Auth account 3"
        },
        "httpQueryAuth": {
          "id": "Fak4Qg8o38A75E24",
          "name": "browsless"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get workflow static data storage\nconst staticData = $getWorkflowStaticData('global');\n\n// Extract Date field\nconst updatedDate = $input.first().json.headers.date;\n\n// Get previous Date (or empty string if first run)\nconst previousDate = staticData.previousDate|| '';\n\nconsole.log('Updated Date:', updatedDate);\nconsole.log('Previous Date:', previousDate || '(first run - no previous Date');\n\n// Determine if content has changed\nconst isChanged = !previousDate|| updatedDate !== previousDate;\n\nconsole.log('Content changed?', isChanged);\nconsole.log('Reason:', previousDate === '' ? 'First run' : (updatedDate  !== previousDate ? 'ETag changed' : 'No change'));\n\n// IMPORTANT: Store updated Date for next run\nstaticData.previousDate = updatedDate;\n\n// Return comparison results\nreturn {\n  json: {\n    updatedDate,\n    previousDate: previousDate || '(first run)',\n    isFirstRun: previousDate === '',\n    isChanged,\n    timestamp: new Date().toISOString()\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -880
      ],
      "id": "45eedd12-99c9-4ea6-b994-51c55d9274f0",
      "name": "Updated etag?"
    },
    {
      "parameters": {
        "method": "HEAD",
        "url": "https://trisigma.ai/portfolio",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -60,
        -880
      ],
      "id": "25014f3b-2191-4c5d-9fea-2a1e9f99e98a",
      "name": "Trigig Head Data"
    },
    {
      "parameters": {
        "jsCode": "// Function to process the portfolio data in n8n format\nfunction processPortfolio(inputItems) {\n  // Extract all items from the json property as required by n8n\n  const items = inputItems.map(item => item.json);\n  \n  // Separate items into two groups: Notion (with URL ID) and Portfolio (without URL ID)\n  const notionItems = items.filter(item => item[\"URL ID\"]);\n  const portfolioItems = items.filter(item => !item[\"URL ID\"]);\n  \n  console.log(`Found ${notionItems.length} Notion items and ${portfolioItems.length} Portfolio items`);\n  \n  // Create maps for easier lookup by CA\n  const notionMap = new Map();\n  notionItems.forEach(item => notionMap.set(item.CA, item));\n  \n  const portfolioMap = new Map();\n  portfolioItems.forEach(item => portfolioMap.set(item.CA, item));\n  \n  // Create a set of all unique CAs\n  const allCAs = new Set([...notionMap.keys(), ...portfolioMap.keys()]);\n  console.log(`Total unique CAs: ${allCAs.size}`);\n  \n  // Initialize flags\n  const flags = {\n    added: false,\n    removed: false,\n    updated: false\n  };\n  \n  // Create an array to hold the result items\n  const resultItems = [];\n  \n  // Process all CAs in a single loop to better manage the combined effects\n  // of updates, additions, and removals\n  for (const ca of allCAs) {\n    const notionItem = notionMap.get(ca);\n    const portfolioItem = portfolioMap.get(ca);\n    \n    // CASE 1: Update check - both items exist, potential update scenario\n    if (notionItem && portfolioItem) {\n      const updatedItem = {...notionItem}; // Start with Notion item to preserve URL ID\n      let itemWasUpdated = false;\n      \n      // Compare each field except URL ID\n      // key !== \"URL ID\" && key !== \"CA\" && key !== \"Token\"\n      // notionItem[key] !== portfolioItem[key])\n      for (const key in portfolioItem) {\n        if (key !== \"URL ID\" && key !== \"URL ID\" && key !== \"CA\" && key !== \"Token\") {\n          // Field has changed - format as {value, new_value}\n          updatedItem[key] = {\n            value: notionItem[key],\n            new_value: portfolioItem[key]\n          };\n          itemWasUpdated = true;\n        }\n      }\n      \n      // For specified fields without new_value, copy value into new_value\n      const fieldsToAddNewValue = [\"Investment CAP\", \"ATH/Investment CAP\", \"ATH\", \"Investment Amount\", \"Current MC\"];\n      for (const field of fieldsToAddNewValue) {\n        if (updatedItem[field] && !updatedItem[field].new_value) {\n          // If it's a regular field (not an object with value/new_value)\n          if (typeof updatedItem[field] !== 'object' || updatedItem[field] === null) {\n            updatedItem[field] = {\n              value: updatedItem[field],\n              new_value: updatedItem[field]\n            };\n          }\n        }\n      }\n      \n      if (itemWasUpdated) {\n        console.log(`Updated item: ${portfolioItem.Token} (${ca})`);\n        flags.updated = true;\n      } else {\n        console.log(`No changes for: ${portfolioItem.Token} (${ca})`);\n      }\n      \n      resultItems.push(updatedItem);\n    }\n    \n    // CASE 2: Addition check - exists in portfolio but not in Notion\n    else if (!notionItem && portfolioItem) {\n      console.log(`Adding new item: ${portfolioItem.Token} (${ca})`);\n      const newItem = {...portfolioItem, \"URL ID\": null};\n      resultItems.push(newItem);\n      flags.added = true;\n    }\n    \n    // CASE 3: Removal check - exists in Notion but not in portfolio\n    else if (notionItem && !portfolioItem) {\n      console.log(`Removed item: ${notionItem.Token} (${ca})`);\n      \n      // Create a minimal version of the item with only URL ID, CA, and Token\n      const removedItem = {\n        \"URL ID\": notionItem[\"URL ID\"],\n        \"CA\": notionItem.CA,\n        \"Token\": notionItem.Token\n      };\n      \n      // Set all other fields to null\n      // Get all keys from the original item\n      const allKeys = Object.keys(notionItem);\n      \n      // For each key that isn't URL ID, CA, or Token, add it with null value\n      for (const key of allKeys) {\n        if (key !== \"URL ID\" && key !== \"CA\" && key !== \"Token\") {\n          removedItem[key] = null;\n        }\n      }\n      \n      // Add to the result\n      resultItems.push(removedItem);\n      flags.removed = true;\n    }\n  }\n  \n  // === MODIFIED PART STARTS HERE ===\n  // Rename flags to global_state_flags\n  const global_state_flags = flags;\n  \n  // Add global_state_flags to each result item\n  resultItems.forEach(item => {\n    item.global_state_flags = {...global_state_flags};\n  });\n  \n  // Convert each result item to n8n format\n  const n8nResultItems = resultItems.map(item => ({ json: item }));\n  \n  // Return the array of items\n  return n8nResultItems;\n  // === MODIFIED PART ENDS HERE ===\n}\n\n// Process the input data using n8n's $input.all()\nconst result = processPortfolio($input.all());\nreturn result;\n\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        -300
      ],
      "id": "5bc23f9b-cf72-4e39-9f22-3b1343dad575",
      "name": "Compare and Update"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ ($json.global_state_flags.added && $json.global_state_flags.updated) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "3f3ad1c8-113c-4392-9d66-91d37a34d48a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Update and Add"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "fa3d0fa0-5b57-4dad-9fef-9cd7e2a93215",
                    "leftValue": "={{ ($json.global_state_flags.removed && $json.global_state_flags.updated) }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Update and Remove"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b041323e-5a5a-48a4-b834-743d0e5e2288",
                    "leftValue": "={{ $json.global_state_flags.added }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Add"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1e76601b-7819-424f-84cc-d4fb08aaf543",
                    "leftValue": "={{ $json.global_state_flags.removed }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Remove"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ace974aa-f6da-4301-9bea-9f9ef144d118",
                    "leftValue": "={{ $json.global_state_flags.updated }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "=Update"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1720,
        -340
      ],
      "id": "cb57682b-4bbc-446e-b1a8-68f31b685db9",
      "name": "Switch"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "1f90a499-0b36-800e-82d3-c246868f382a",
          "mode": "list",
          "cachedResultName": "Portfolio",
          "cachedResultUrl": "https://www.notion.so/1f90a4990b36800e82d3c246868f382a"
        },
        "simple": false,
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        100,
        -520
      ],
      "id": "404325c7-ae4b-4f48-98fc-cbaad8d69f23",
      "name": "Retrieve Previous Portofolio",
      "executeOnce": false,
      "credentials": {
        "notionApi": {
          "id": "1eMAeENtcYg86x4v",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "operation": "archive",
        "pageId": {
          "__rl": true,
          "value": "={{ $json[\"URL ID\"] }}",
          "mode": "url"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2380,
        -100
      ],
      "id": "25b4cf9f-084d-4801-84d6-45e640ed6869",
      "name": "Remove",
      "credentials": {
        "notionApi": {
          "id": "1eMAeENtcYg86x4v",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "1f90a499-0b36-800e-82d3-c246868f382a",
          "mode": "list",
          "cachedResultName": "Portfolio",
          "cachedResultUrl": "https://www.notion.so/1f90a4990b36800e82d3c246868f382a"
        },
        "title": "={{ $json.Token }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Date|date",
              "includeTime": false,
              "date": "={{ $json.Date }}"
            },
            {
              "key": "CA|rich_text",
              "textContent": "={{ $json.CA }}"
            },
            {
              "key": "Investment Amount|rich_text",
              "richText": "={{ false }}",
              "textContent": "={{ $json[\"Investment Amount\"] }}"
            },
            {
              "key": "ATH|rich_text",
              "textContent": "={{ $json.ATH }}"
            },
            {
              "key": "Current MC|rich_text",
              "textContent": "={{ $json[\"Current MC\"] }}"
            },
            {
              "key": "Investment CAP|rich_text",
              "textContent": "={{ $json[\"Investment CAP\"] }}"
            },
            {
              "key": "Current Balance|rich_text",
              "textContent": "={{ $json[\"Current Balance\"] }}"
            },
            {
              "key": "ATH/Investment CAP|rich_text",
              "textContent": "={{ $json[\"ATH/Investment CAP\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2360,
        -560
      ],
      "id": "459d1f0e-b7a4-4b3d-93b6-f11ef3c124e9",
      "name": "Add",
      "credentials": {
        "notionApi": {
          "id": "1eMAeENtcYg86x4v",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1120,
        -300
      ],
      "id": "0a97e661-812d-49d5-9b9f-498577d4c94c",
      "name": "Append Inputs"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "row",
              "cssSelector": ".portfolio .table-container"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        180,
        -180
      ],
      "id": "43d8ab23-d0a0-4677-8ff2-6c58b2164b57",
      "name": "Extract Portfolio"
    },
    {
      "parameters": {
        "jsCode": "// Simplified n8n node code for structured data extraction\nfunction extractData() {\n  const columns = [\"Date\", \"Token\", \"CA\", \"Investment Amount\", \"Investment CAP\", \"ATH\", \"ATH/Investment CAP\", \"Current MC\", \"Current Balance\"];\n  const result = [];\n  \n  // Get the raw text and normalize whitespace\n  const rawText = items[0].json.row;\n  \n  // Use date pattern (DD.MM.YYYY) to identify the start of new rows\n  const datePattern = /\\d{2}\\.\\d{2}\\.\\d{4}/g;\n  const dates = [...rawText.matchAll(datePattern)];\n  \n  for (let i = 0; i < dates.length; i++) {\n    const date = dates[i][0];\n    const startIndex = dates[i].index;\n    const endIndex = (i < dates.length - 1) ? dates[i + 1].index : rawText.length;\n    \n    // Extract the complete text for this row\n    let rowText = rawText.substring(startIndex, endIndex).trim();\n    \n    // Split the row by spaces and line breaks, and filter out empty elements\n    let rowElements = rowText.split(/[\\s\\n]+/).filter(element => element);\n    \n    // Create an object for this row\n    const rowData = {};\n    \n    // First element is always the date\n    rowData[columns[0]] = date;\n    \n    // Remove the date from the elements array\n    const dateIndex = rowElements.indexOf(date);\n    if (dateIndex !== -1) {\n      rowElements.splice(dateIndex, 1);\n    }\n    \n    // Assign the remaining elements to their respective columns\n    for (let j = 1; j < columns.length && j-1 < rowElements.length; j++) {\n      rowData[columns[j]] = rowElements[j-1];\n    }\n    \n    result.push(rowData);\n  }\n  return result;\n  // return [{ json: {data:result} }];\n}\n\n// Execute the function\nreturn extractData();\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        -180
      ],
      "id": "80450e6e-90d2-43a2-b5d9-6920de8bdccb",
      "name": "Transform Portfolio into Items"
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.Date }}",
        "outputFieldName": "=Date",
        "options": {
          "includeInputFields": true,
          "fromFormat": "={{ \"dd.MM.yyyy\" }}"
        }
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        800,
        -180
      ],
      "id": "832eebf3-66f5-4cdc-ae2a-72c54ca3681c",
      "name": "Format Date"
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.Date }}",
        "outputFieldName": "Date",
        "options": {
          "includeInputFields": true
        }
      },
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        860,
        -520
      ],
      "id": "db1791ae-7d7a-45a7-bb03-907ca1bf7c53",
      "name": "Format Date1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a0fe9069-dd95-4aca-865d-6e7e0d5cb5b2",
              "leftValue": "={{ $json[\"URL ID\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1980,
        -660
      ],
      "id": "80d4d58f-855d-47c1-99f7-a4577aac04ad",
      "name": "Add?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b1072a6f-30b1-42c5-a256-8d9c548cb5d4",
              "leftValue": "={{ $json[\"Investment CAP\"] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "837f0e8a-57fd-48ae-abeb-d6d3b5f4e5da",
              "leftValue": "={{ $json[\"ATH/Investment CAP\"] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2000,
        -20
      ],
      "id": "8aa2f3bf-5ae5-4c32-a81c-6a5f7d381e46",
      "name": "Remove?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a3ad8c42-88f9-4373-85c4-2b86dfdd1f16",
              "leftValue": "={{ $json.isChanged }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        500,
        -880
      ],
      "id": "f3f10a05-6dc8-4610-b336-46b2aad3dd01",
      "name": "No Updates?"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "Updates are available in Notion Trisig Portfolio:\nhttps://www.notion.so/Trisig-1f90a4990b36805da3fbd9fcacd555b6",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2600,
        -300
      ],
      "id": "3d1fd971-fdd6-43e1-9e3a-90307c2f8086",
      "name": "Updates",
      "webhookId": "dda28789-cdbd-49fe-8869-f8135c334186",
      "executeOnce": true,
      "credentials": {
        "discordWebhookApi": {
          "id": "E3NkyuvdPhet0GKF",
          "name": "Portfolio Updates"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "=A new token has been added in Trisig Portfolio.\nDate: {{ $json.property_date.start }}\nToken name:  {{ $json.name }}\nToken CA: {{ $json.property_ca }}\nInvestment Amount: {{ $json.property_investment_amount }}\nCurrent Balance: {{ $json.property_current_balance }}\nNotion URL ID: {{ $json.url }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2600,
        -500
      ],
      "id": "79656214-cff6-4687-8b34-64af9fe94e17",
      "name": "Adds",
      "webhookId": "95bf2a53-836e-4f81-88df-75dbae0a3a8e",
      "credentials": {
        "discordWebhookApi": {
          "id": "VR7qsLnmCSk1uvHy",
          "name": "Portfolio Add"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2600,
        -60
      ],
      "id": "e8678ce0-7f9f-4256-8484-58d620c352a0",
      "name": "Discord",
      "webhookId": "d2d3c147-5963-4d99-993a-3ddd1d157425",
      "credentials": {
        "discordWebhookApi": {
          "id": "E3NkyuvdPhet0GKF",
          "name": "Portfolio Updates"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "gioben@protonmail.com",
        "subject": "Trisig Portfolio Addition",
        "message": "=A new token has been added in Trisig Portfolio. \nDate: {{ $json.property_date.start }} \nToken name:  {{ $json.name }} \nToken CA: {{ $json.property_ca }} \nInvestment Amount: {{ $json.property_investment_amount }} \nCurrent Balance: {{ $json.property_current_balance }} \nNotion URL ID: {{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2600,
        -740
      ],
      "id": "369f354f-a3c8-402d-b34c-8973b4898952",
      "name": "Gmail",
      "webhookId": "d7aa1e3b-b808-49fd-acea-251d6e2b0418",
      "credentials": {
        "gmailOAuth2": {
          "id": "EdToD3kB7ULzhVZc",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ae84d22e-f605-411c-a6d3-d56dec31e64d",
              "name": "=CA",
              "value": "={{ $json.properties.CA.rich_text[0].text.content }}",
              "type": "string"
            },
            {
              "id": "1d1758cc-8e20-414b-97c2-aa23865c5a4d",
              "name": "Token",
              "value": "={{ $json.properties.Token.title[0].text.content }}",
              "type": "string"
            },
            {
              "id": "7397d23b-d658-436e-9484-9701794d6360",
              "name": "Investment CAP",
              "value": "={{ $json.properties[\"Investment CAP\"].rich_text[0].text.content }}",
              "type": "string"
            },
            {
              "id": "5a5bfc20-4755-40d1-91ca-e5972b8cc947",
              "name": "ATH/Investment CAP",
              "value": "={{ $json.properties[\"ATH/Investment CAP\"].rich_text[0].text.content }}",
              "type": "string"
            },
            {
              "id": "43f3260e-b4dd-4d6a-80dc-62e484a791f3",
              "name": "ATH",
              "value": "={{ $json.properties.ATH.rich_text[0].text.content }}",
              "type": "string"
            },
            {
              "id": "1e3ef687-ae45-43d0-b9b5-003f968d6c9a",
              "name": "Current MC",
              "value": "={{ $json.properties[\"Current MC\"].rich_text[0].text.content }}",
              "type": "string"
            },
            {
              "id": "804dd039-baf5-4f55-9e30-f8c4263a610d",
              "name": "Investment Amount",
              "value": "={{ $json.properties[\"Investment Amount\"].rich_text[0].text.content }}",
              "type": "string"
            },
            {
              "id": "1c72ee46-c3e5-417d-9d2b-f27639a5413b",
              "name": "Date",
              "value": "={{ $json.properties.Date.date.start }}",
              "type": "string"
            },
            {
              "id": "5da7aa55-f022-48f1-ae5c-9b9e4641272e",
              "name": "Current Balance",
              "value": "={{ $json.properties[\"Current Balance\"].rich_text[0].text.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        -520
      ],
      "id": "2a7fb9ee-3af7-4ed4-9357-6e0835f1e6f5",
      "name": "Convert To Portfolio json"
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ \"https://api.notion.com/v1/pages/\" + $json[\"URL ID\"].split('/').pop().split('-').pop() }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"properties\": {\n    \"Investment CAP\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['Investment CAP'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"ATH/Investment CAP\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['ATH/Investment CAP'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"ATH\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['ATH'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"Current MC\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['Current MC'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"Investment Amount\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['Investment Amount'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"Current Balance\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['Current Balance'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"URL ID\": {\n      \"url\": \"{{$json['URL ID']}}\"\n    }\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2360,
        -340
      ],
      "id": "29641247-33b4-4c28-a91b-bfe892d06123",
      "name": "Notion Manual Updates",
      "credentials": {
        "httpHeaderAuth": {
          "id": "L2msUDZsWDkE7k48",
          "name": "Header Auth account 3"
        },
        "notionApi": {
          "id": "1eMAeENtcYg86x4v",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        840,
        -900
      ],
      "id": "89cbc98c-3108-4bae-929c-8406ba6b9ae1",
      "name": "No Updates Then Stop"
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "CA",
              "field2": "CA"
            }
          ]
        },
        "resolve": "preferInput2",
        "options": {}
      },
      "type": "n8n-nodes-base.compareDatasets",
      "typeVersion": 2.3,
      "position": [
        1180,
        280
      ],
      "id": "6e18baeb-c3a7-4e1d-b06f-f79a23600f54",
      "name": "Compare Datasets1"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": {
          "__rl": true,
          "value": "1f90a499-0b36-800e-82d3-c246868f382a",
          "mode": "list",
          "cachedResultName": "Portfolio",
          "cachedResultUrl": "https://www.notion.so/1f90a4990b36800e82d3c246868f382a"
        },
        "title": "={{ $json.Token }}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Date|date",
              "includeTime": false,
              "date": "={{ $json.Date }}"
            },
            {
              "key": "CA|rich_text",
              "textContent": "={{ $json.CA }}"
            },
            {
              "key": "Investment Amount|rich_text",
              "richText": "={{ false }}",
              "textContent": "={{ $json[\"Investment Amount\"] }}"
            },
            {
              "key": "ATH|rich_text",
              "textContent": "={{ $json.ATH }}"
            },
            {
              "key": "Current MC|rich_text",
              "textContent": "={{ $json[\"Current MC\"] }}"
            },
            {
              "key": "Investment CAP|rich_text",
              "textContent": "={{ $json[\"Investment CAP\"] }}"
            },
            {
              "key": "Current Balance|rich_text",
              "textContent": "={{ $json[\"Current Balance\"] }}"
            },
            {
              "key": "ATH/Investment CAP|rich_text",
              "textContent": "={{ $json[\"ATH/Investment CAP\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        2120,
        660
      ],
      "id": "aaacd493-66bf-4650-a43a-dbaf4ed53331",
      "name": "Add1",
      "credentials": {
        "notionApi": {
          "id": "1eMAeENtcYg86x4v",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "gioben@protonmail.com",
        "subject": "Trisig Portfolio Addition",
        "message": "=A new token has been added in Trisig Portfolio. \nDate: {{ $json.property_date.start }} \nToken name:  {{ $json.name }} \nToken CA: {{ $json.property_ca }} \nInvestment Amount: {{ $json.property_investment_amount }} \nCurrent Balance: {{ $json.property_current_balance }} \nNotion URL ID: {{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2360,
        560
      ],
      "id": "588c5960-486c-46ad-a35e-ecdb2b1ee857",
      "name": "Gmail1",
      "webhookId": "d7aa1e3b-b808-49fd-acea-251d6e2b0418",
      "credentials": {
        "gmailOAuth2": {
          "id": "EdToD3kB7ULzhVZc",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "=A new token has been added in Trisig Portfolio.\nDate: {{ $json.property_date.start }}\nToken name:  {{ $json.name }}\nToken CA: {{ $json.property_ca }}\nInvestment Amount: {{ $json.property_investment_amount }}\nCurrent Balance: {{ $json.property_current_balance }}\nNotion URL ID: {{ $json.url }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2340,
        800
      ],
      "id": "e51ada39-59fe-40cc-b969-169f83ae6684",
      "name": "Adds1",
      "webhookId": "95bf2a53-836e-4f81-88df-75dbae0a3a8e",
      "credentials": {
        "discordWebhookApi": {
          "id": "VR7qsLnmCSk1uvHy",
          "name": "Portfolio Add"
        }
      }
    },
    {
      "parameters": {
        "method": "PATCH",
        "url": "={{ \"https://api.notion.com/v1/pages/\" + $json[\"URL ID\"].split('/').pop().split('-').pop() }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "notionApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Notion-Version",
              "value": "2022-06-28"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"properties\": {\n    \"Investment CAP\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['Investment CAP'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"ATH/Investment CAP\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['ATH/Investment CAP'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"ATH\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['ATH'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"Current MC\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['Current MC'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"Investment Amount\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['Investment Amount'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"Current Balance\": {\n      \"rich_text\": [\n        {\n          \"text\": {\n            \"content\": \"{{$json['Current Balance'].new_value}}\"\n          }\n        }\n      ]\n    },\n    \"URL ID\": {\n      \"url\": \"{{$json['URL ID']}}\"\n    }\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2060,
        400
      ],
      "id": "fb739e49-4d6c-46e1-bba3-34e7b75c4d29",
      "name": "Notion Manual Updates1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "L2msUDZsWDkE7k48",
          "name": "Header Auth account 3"
        },
        "notionApi": {
          "id": "1eMAeENtcYg86x4v",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "Updates are available in Notion Trisig Portfolio:\nhttps://www.notion.so/Trisig-1f90a4990b36805da3fbd9fcacd555b6",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2380,
        400
      ],
      "id": "9fefa638-e811-4cec-b410-eb05da223756",
      "name": "Updates1",
      "webhookId": "dda28789-cdbd-49fe-8869-f8135c334186",
      "executeOnce": true,
      "credentials": {
        "discordWebhookApi": {
          "id": "E3NkyuvdPhet0GKF",
          "name": "Portfolio Updates"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2060,
        240
      ],
      "id": "ee3e7ce6-4a84-4225-9b8b-6a1935e4544e",
      "name": "No Updates Then Stop1"
    },
    {
      "parameters": {
        "operation": "archive",
        "pageId": {
          "__rl": true,
          "value": "={{ $json[\"URL ID\"] }}",
          "mode": "url"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        1860,
        140
      ],
      "id": "433b8267-f7cf-4e0a-bab7-4d51e817da5f",
      "name": "Remove1",
      "credentials": {
        "notionApi": {
          "id": "1eMAeENtcYg86x4v",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2280,
        120
      ],
      "id": "661efae1-1168-4daa-8832-ccee2a81f8e8",
      "name": "Discord1",
      "webhookId": "d2d3c147-5963-4d99-993a-3ddd1d157425",
      "credentials": {
        "discordWebhookApi": {
          "id": "E3NkyuvdPhet0GKF",
          "name": "Portfolio Updates"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "n8n",
  "repo_owner": "thalderg",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1",
    "saveExecutionProgress": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "shared": [
    {
      "createdAt": "2025-05-20T10:24:18.669Z",
      "updatedAt": "2025-05-20T10:24:18.669Z",
      "role": "workflow:owner",
      "workflowId": "IKuBj6sIctF8oPgQ",
      "projectId": "rwZmgF8pMPgWdXwq"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": [
        12
      ]
    },
    "global": {
      "previousETag": "W/\"7836ae2089e31ceb9aeb02d86a6c28c4\"",
      "previousDate": "Fri, 30 May 2025 06:00:03 GMT"
    },
    "node:Updated etag?": {
      "previousETag": "W/\"7836ae2089e31ceb9aeb02d86a6c28c4\"",
      "previousDate": "Fri, 30 May 2025 06:00:03 GMT"
    }
  },
  "tags": [
    {
      "createdAt": "2025-05-29T09:20:50.795Z",
      "updatedAt": "2025-05-29T09:20:50.795Z",
      "id": "42Nq7KsSNnhDSFu9",
      "name": "Scraper"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-05-30T11:02:32.000Z",
  "versionId": "0fc3d551-3576-44b2-8e1f-a182d3fbbedf"
}