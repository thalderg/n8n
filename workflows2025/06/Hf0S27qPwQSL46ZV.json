{
  "": "",
  "active": false,
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Topic Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Topic Generator": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set X API Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set X API Parameters": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Add Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Score": {
      "main": [
        [
          {
            "node": "Add Rates & Indicators",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-03T12:41:27.079Z",
  "id": "Hf0S27qPwQSL46ZV",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Twitter Generator",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -320,
        -240
      ],
      "id": "e3bc90ab-7dd2-4793-921c-d06247ac0395",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "jsCode": "// Create array of topics\nconst topics = [\"n8n\", \"AI\", \"defAI\"];\n\n// Return as array of objects\nreturn topics.map(topic => ({\n  json: {\n    topic: topic\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -100,
        -240
      ],
      "id": "e82e8c21-c075-4181-878d-26ec36498f6a",
      "name": "Topic Generator"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        120,
        -180
      ],
      "id": "92586035-bd29-47cd-8db2-2278d8316412",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            },
            {
              "name": "limit",
              "value": "={{ $json.limit }}"
            },
            {
              "name": "result_type",
              "value": "={{ $json.result_type }}"
            }
          ]
        },
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Accept\": \"application/json\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        700,
        -60
      ],
      "id": "24806ffc-8f4b-43cd-a05e-dec947c1fbea",
      "name": "HTTP Request",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y9mqglloyte4NEfz",
          "name": "Twitter API"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "14770443-872a-4d20-bf8b-927263c2801d",
              "name": "query",
              "value": "={{ $json.topic }} ((-filter:replies min_retweets:2 min_faves:30) OR (filter:self_threads min_faves:15)) lang:en -spam -promotional -\"follow me\" -bot -\"dm me\" -\"link in bio\" within_time:24h",
              "type": "string"
            },
            {
              "id": "6f64d503-5b18-48ed-9898-ea6a44701fb7",
              "name": "limit",
              "value": 10,
              "type": "number"
            },
            {
              "id": "884d3ac4-bbdd-4b35-b1e4-11531c9465a2",
              "name": "result_type",
              "value": "top",
              "type": "string"
            },
            {
              "id": "bc16ed32-f357-49c3-bb16-f48764fb82bc",
              "name": "topic",
              "value": "={{ $json.topic }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        -60
      ],
      "id": "c5337c57-c98b-4727-a04d-40121cc32917",
      "name": "Set X API Parameters"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d80ed495-b86d-4111-b568-8fee23caad0a",
              "name": "tweet_text",
              "value": "={{ $json.tweets.text }}",
              "type": "string"
            },
            {
              "id": "8c23f813-f0fb-4cc4-a373-838b52809cb5",
              "name": "tweet_id",
              "value": "={{ $json.tweets.id }}",
              "type": "string"
            },
            {
              "id": "53023fdc-a1a7-47ba-aa68-bc6f899a0f24",
              "name": "date_collected",
              "value": "={{ new Date().toUTCString().replace(/GMT/, '+0000').replace(/,/, '').replace(/(\\w{3}) (\\w{3}) (\\d{2}) (\\d{4}) (\\d{2}:\\d{2}:\\d{2})/, '$1 $2 $3 $5 +0000 $4') }}",
              "type": "string"
            },
            {
              "id": "547e2bf2-934e-439c-ad7c-df013576f120",
              "name": "created_at",
              "value": "={{ $json.tweets.createdAt }}",
              "type": "string"
            },
            {
              "id": "7c00968d-e708-4b7c-8844-8d8cff3dea5a",
              "name": "tweet_url",
              "value": "={{ $json.tweets.url }}",
              "type": "string"
            },
            {
              "id": "104c10d0-0a00-425d-985b-73adf3c14773",
              "name": "author_username",
              "value": "={{ $json.tweets.author.userName }}",
              "type": "string"
            },
            {
              "id": "f44b5799-54fa-4c91-ba7a-eb8e061bcf7b",
              "name": "author_followers",
              "value": "={{ $json.tweets.author.followers }}",
              "type": "string"
            },
            {
              "id": "a0134c1b-fb1f-4eca-aeb4-9e1754b9113a",
              "name": "like_count",
              "value": "={{ $json.tweets.likeCount }}",
              "type": "string"
            },
            {
              "id": "066eebb9-aa76-43c1-8283-6a1335b6731e",
              "name": "retweet_count",
              "value": "={{ $json.tweets.retweetCount }}",
              "type": "string"
            },
            {
              "id": "7cc5f5d3-a56d-4674-b8d2-880fd45dc53e",
              "name": "bookmark_count",
              "value": "={{ $json.tweets.bookmarkCount }}",
              "type": "string"
            },
            {
              "id": "efa36c5b-ee1f-4e97-8328-456c5a1d4b6c",
              "name": "view_count",
              "value": "={{ $json.tweets.viewCount }}",
              "type": "string"
            },
            {
              "id": "c9bcde2b-0488-4e54-b9aa-6a8a8c19ad22",
              "name": "quote_count",
              "value": "={{ $json.tweets.quoteCount }}",
              "type": "string"
            },
            {
              "id": "6561214f-26df-4e44-8b4a-3f8bf06847b8",
              "name": "conversation_id",
              "value": "={{ $json.tweets.conversationId }}",
              "type": "string"
            },
            {
              "id": "553ee9c8-59b7-4932-b9e7-d1c8e699a177",
              "name": "has_media",
              "value": "={{ ($json.tweets.extendedEntities && Array.isArray($json.tweets.extendedEntities.media) && $json.tweets.extendedEntities.media.length > 0) ? true : false }}",
              "type": "string"
            },
            {
              "id": "6996318a-7c65-4dda-a742-21a82fe6207d",
              "name": "media_type",
              "value": "={{ ($json.tweets.extendedEntities && $json.tweets.extendedEntities.media && $json.tweets.extendedEntities.media[0]) ? $json.tweets.extendedEntities.media[0].type : null }}",
              "type": "string"
            },
            {
              "id": "560ad3c2-8af8-4a80-b1b6-8091d1fc2e45",
              "name": "media_urls",
              "value": "={{ ($json.tweets.extendedEntities && $json.tweets.extendedEntities.media) ? $json.tweets.extendedEntities.media.map(m => m.url).join(', ') : null }}",
              "type": "string"
            },
            {
              "id": "d96a7640-1a73-4142-9a80-4fe0a3ba9d5f",
              "name": "external_links",
              "value": "={{ ($json.tweets.entities && $json.tweets.entities.urls && $json.tweets.entities.urls.length > 0) ? $json.tweets.entities.urls.map(u => u.expanded_url).join(', ') : null }}",
              "type": "string"
            },
            {
              "id": "ec1b19b7-0fc2-4233-9708-3bf8b452999b",
              "name": "topic",
              "value": "={{ $('Set X API Parameters').first().json.topic }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1160,
        -60
      ],
      "id": "4abab152-91a6-4783-81e8-f59e04d0f27d",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fieldToSplitOut": "tweets",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        920,
        -60
      ],
      "id": "addf66a7-a847-49bc-82b7-02ed4c2a28f3",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "// Engagement Score Calculator with Freshness Factor (0-100 scale)\nconst tweets = $input.all();\nconst scoredTweets = [];\n\n// Get all tweets for normalization\nconst allTweets = tweets.map(item => item.json);\nconst viewCounts = allTweets.map(t => parseInt(t.view_count) || 1);\nconst followerCounts = allTweets.map(t => parseInt(t.author_followers) || 1);\n\nconst maxViews = Math.max(...viewCounts);\nconst maxFollowers = Math.max(...followerCounts);\n\nfor (const item of tweets) {\n    const tweet = item.json;\n    \n    // Parse numeric values\n    const likes = parseInt(tweet.like_count) || 0;\n    const retweets = parseInt(tweet.retweet_count) || 0;\n    const bookmarks = parseInt(tweet.bookmark_count) || 0;\n    const views = parseInt(tweet.view_count) || 1;\n    const quotes = parseInt(tweet.quote_count) || 0;\n    const followers = parseInt(tweet.author_followers) || 1;\n    \n    // FRESHNESS CALCULATION\n    const now = new Date();\n    const tweetDate = new Date(tweet.created_at);\n    const hoursOld = (now - tweetDate) / (1000 * 60 * 60);\n    const daysOld = hoursOld / 24;\n    \n    // Freshness multiplier (decays over time)\n    let freshnessMultiplier = 1.0;\n    \n    if (daysOld <= 1) {\n        freshnessMultiplier = 1.2;      // 20% boost for content < 1 day\n    } else if (daysOld <= 3) {\n        freshnessMultiplier = 1.1;      // 10% boost for content < 3 days\n    } else if (daysOld <= 7) {\n        freshnessMultiplier = 1.0;      // No change for content < 1 week\n    } else if (daysOld <= 14) {\n          freshnessMultiplier = 0.8;      // 20% penalty for content < 2 weeks\n    } else if (daysOld <= 30) {\n        freshnessMultiplier = 0.6;      // 40% penalty for content < 1 month\n    } else if (daysOld <= 90) {\n        freshnessMultiplier = 0.4;      // 60% penalty for content < 3 months\n    } else {\n        freshnessMultiplier = 0.3;      // 70% penalty for content > 3 months\n    }\n    \n    // Core engagement calculation\n    const totalEngagements = likes + retweets + bookmarks + quotes;\n    const engagementRate = (totalEngagements / views) * 100;\n    \n    // Base scoring (before freshness)\n    const engagementScore = Math.min(engagementRate * 10, 40);\n    \n    const bookmarkRate = (bookmarks / views) * 100;\n    const bookmarkScore = Math.min(bookmarkRate * 12.5, 25);\n    \n    const amplificationRate = ((retweets + quotes) / views) * 100;\n    const amplificationScore = Math.min(amplificationRate * 10, 20);\n    \n    const authorityScore = (followers / maxFollowers) * 10;\n    \n    let mediaBonus = 0;\n    if (tweet.has_media === \"true\") {\n        mediaBonus = tweet.media_type === \"video\" ? 5 : 3;\n    }\n    \n    // Viral bonuses\n    let viralBonus = 0;\n    if (likes > 1000) viralBonus = 10;\n    if (likes > 5000) viralBonus = 20;\n    if (likes > 10000) viralBonus = 30;\n    \n    // Base score (before freshness)\n    const baseScore = engagementScore + bookmarkScore + amplificationScore + authorityScore + mediaBonus + viralBonus;\n    \n    // Apply freshness multiplier\n    const finalScore = Math.min(Math.round(baseScore * freshnessMultiplier), 100);\n    \n    scoredTweets.push({\n        json: {\n            ...tweet,\n            engagement_score: finalScore,\n            days_old: Math.round(daysOld * 10) / 10,  // Round to 1 decimal\n            freshness_multiplier: Math.round(freshnessMultiplier * 100) / 100,  // Round to 2 decimals\n            base_score: Math.round(baseScore)  // Score before freshness\n        }\n    });\n}\n\n// Sort by engagement score (highest first)\nscoredTweets.sort((a, b) => b.json.engagement_score - a.json.engagement_score);\n\nreturn scoredTweets;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        -60
      ],
      "id": "690c282b-78fc-4c64-84be-b6b040845fa3",
      "name": "Add Score"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Analytics Code Node with Dynamic Benchmarks\nconst tweets = $input.all();\nconst enhancedTweets = [];\n\n// First pass: Calculate all metrics\nfor (const item of tweets) {\n    const tweet = item.json;\n    \n    // Parse numbers safely\n    const likes = parseInt(tweet.like_count) || 0;\n    const retweets = parseInt(tweet.retweet_count) || 0;\n    const bookmarks = parseInt(tweet.bookmark_count) || 0;\n    const quotes = parseInt(tweet.quote_count) || 0;\n    const views = parseInt(tweet.view_count) || 1;\n    \n    // Calculate engagement metrics\n    const totalEngagements = likes + retweets + bookmarks + quotes;\n    const engagementRate = parseFloat(((totalEngagements / views) * 100).toFixed(2));\n    const bookmarkRate = parseFloat(((bookmarks / views) * 100).toFixed(2));\n    const amplificationRate = parseFloat((((retweets + quotes) / views) * 100).toFixed(2));\n    \n    // Thread detection\n    const text = tweet.tweet_text;\n    const threadIndicator = \n        text.includes(\"🧵\") ||\n        text.match(/\\d+\\/\\d+/) ||\n        text.includes(\"Thread:\") ||\n        text.includes(\"THREAD\") ||\n        (tweet.conversation_id !== tweet.tweet_id)\n        ? \"thread\" : \"single\";\n\n    // Content type analysis\n    let contentType = \"educational\";\n    if (text.includes(\"comment\") || text.includes(\"follow\")) {\n        contentType = \"engagement_bait\";\n    } else if (text.includes(\"$\") || text.includes(\"money\")) {\n        contentType = \"monetization\";\n    } else if (text.includes(\"here's\") || text.includes(\"setup\")) {\n        contentType = \"tutorial\";\n    }\n    \n    // Call to action detection\n    const hasCallToAction = /comment|follow|repost|dm|share|like this/i.test(text);\n    \n    // Viral status based on engagement score\n    let viralStatus = \"low\";\n    if (tweet.engagement_score >= 80) viralStatus = \"viral\";\n    else if (tweet.engagement_score >= 60) viralStatus = \"high\";\n    else if (tweet.engagement_score >= 40) viralStatus = \"medium\";\n    \n    enhancedTweets.push({\n        json: {\n            ...tweet,\n            engagement_rate: engagementRate,\n            bookmark_rate: bookmarkRate,\n            amplification_rate: amplificationRate,\n            thread_indicator: threadIndicator,\n            content_type: contentType,\n            call_to_action: hasCallToAction,\n            viral_status: viralStatus\n        }\n    });\n}\n\n// Second pass: Calculate benchmarks from all tweets\nconst allTweets = enhancedTweets.map(item => item.json);\nconst engagementRates = allTweets.map(t => t.engagement_rate).sort((a, b) => a - b);\nconst bookmarkRates = allTweets.map(t => t.bookmark_rate).sort((a, b) => a - b);\nconst amplificationRates = allTweets.map(t => t.amplification_rate).sort((a, b) => a - b);\n\n// Calculate percentiles\nfunction getPercentile(arr, percentile) {\n    const index = Math.ceil((percentile / 100) * arr.length) - 1;\n    return arr[Math.max(0, index)];\n}\n\n// Create dynamic benchmarks\nconst benchmarks = {\n    engagement_rate: {\n        poor: getPercentile(engagementRates, 25),      // Bottom 25%\n        average: getPercentile(engagementRates, 50),    // Median\n        good: getPercentile(engagementRates, 75),       // Top 25%\n        excellent: getPercentile(engagementRates, 90)   // Top 10%\n    },\n    bookmark_rate: {\n        poor: getPercentile(bookmarkRates, 25),\n        average: getPercentile(bookmarkRates, 50),\n        good: getPercentile(bookmarkRates, 75),\n        excellent: getPercentile(bookmarkRates, 90)\n    },\n    amplification_rate: {\n        poor: getPercentile(amplificationRates, 25),\n        average: getPercentile(amplificationRates, 50),\n        good: getPercentile(amplificationRates, 75),\n        excellent: getPercentile(amplificationRates, 90)\n    }\n};\n\n// BENCHMARKS FOR REFERENCE:\n// These are calculated dynamically from your dataset\n// Example output might look like:\n// engagement_rate: { poor: 1.2, average: 2.8, good: 4.5, excellent: 6.2 }\n// bookmark_rate: { poor: 0.3, average: 1.1, good: 2.4, excellent: 3.8 }\n// amplification_rate: { poor: 0.1, average: 0.2, good: 0.4, excellent: 0.8 }\n\n// Third pass: Add performance classifications\nconst finalTweets = enhancedTweets.map(item => {\n    const tweet = item.json;\n    \n    // Classify engagement rate\n    let engagementClass = 'poor';\n    if (tweet.engagement_rate >= benchmarks.engagement_rate.excellent) engagementClass = 'excellent';\n    else if (tweet.engagement_rate >= benchmarks.engagement_rate.good) engagementClass = 'good';\n    else if (tweet.engagement_rate >= benchmarks.engagement_rate.average) engagementClass = 'average';\n    \n    // Classify bookmark rate\n    let bookmarkClass = 'poor';\n    if (tweet.bookmark_rate >= benchmarks.bookmark_rate.excellent) bookmarkClass = 'excellent';\n    else if (tweet.bookmark_rate >= benchmarks.bookmark_rate.good) bookmarkClass = 'good';\n    else if (tweet.bookmark_rate >= benchmarks.bookmark_rate.average) bookmarkClass = 'average';\n    \n    // Classify amplification rate\n    let amplificationClass = 'poor';\n    if (tweet.amplification_rate >= benchmarks.amplification_rate.excellent) amplificationClass = 'excellent';\n    else if (tweet.amplification_rate >= benchmarks.amplification_rate.good) amplificationClass = 'good';\n    else if (tweet.amplification_rate >= benchmarks.amplification_rate.average) amplificationClass = 'average';\n    \n    // Overall performance score (for agent decision making)\n    let overallPerformance = 'poor';\n    const classScores = {\n        'poor': 1,\n        'average': 2,\n        'good': 3,\n        'excellent': 4\n    };\n    \n    const avgScore = (classScores[engagementClass] + classScores[bookmarkClass] + classScores[amplificationClass]) / 3;\n    \n    if (avgScore >= 3.5) overallPerformance = 'excellent';\n    else if (avgScore >= 2.5) overallPerformance = 'good';\n    else if (avgScore >= 1.5) overallPerformance = 'average';\n    \n    return {\n        json: {\n            ...tweet,\n            engagement_class: engagementClass,\n            bookmark_class: bookmarkClass,\n            amplification_class: amplificationClass,\n            overall_performance: overallPerformance\n        }\n    };\n});\n\nreturn finalTweets;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        -60
      ],
      "id": "fca7e9da-ec7d-4a1d-b784-a2bbcd5ad4a0",
      "name": "Add Rates & Indicators"
    }
  ],
  "pinData": {},
  "repo_name": "n8n",
  "repo_owner": "thalderg",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-12T16:05:58.000Z",
  "versionId": "60793809-c73a-4de6-beff-91b14f963353"
}