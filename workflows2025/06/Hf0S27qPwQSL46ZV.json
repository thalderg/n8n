{
  "": "",
  "active": false,
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Topic Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Topic Generator": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Set API Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Add Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Score": {
      "main": [
        [
          {
            "node": "Add Rates & Indicators",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Rates & Indicators": {
      "main": [
        [
          {
            "node": "If Thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Tweets": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set API Query": {
      "main": [
        [
          {
            "node": "Get Tweets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Thread": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Thread Reply": {
      "main": [
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Get Thread Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-03T12:41:27.079Z",
  "id": "Hf0S27qPwQSL46ZV",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Twitter Generator",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -320,
        -240
      ],
      "id": "e3bc90ab-7dd2-4793-921c-d06247ac0395",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "jsCode": "// Create array of topics\nconst topics = [\"n8n\", \"AI\", \"defAI\"];\n\n// Return as array of objects\nreturn topics.map(topic => ({\n  json: {\n    topic: topic\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -100,
        -240
      ],
      "id": "e82e8c21-c075-4181-878d-26ec36498f6a",
      "name": "Topic Generator"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        120,
        -180
      ],
      "id": "92586035-bd29-47cd-8db2-2278d8316412",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d80ed495-b86d-4111-b568-8fee23caad0a",
              "name": "tweet_text",
              "value": "={{ $json.tweets.text }}",
              "type": "string"
            },
            {
              "id": "8c23f813-f0fb-4cc4-a373-838b52809cb5",
              "name": "tweet_id",
              "value": "={{ $json.tweets.id }}",
              "type": "string"
            },
            {
              "id": "53023fdc-a1a7-47ba-aa68-bc6f899a0f24",
              "name": "date_collected",
              "value": "={{ new Date().toUTCString().replace(/GMT/, '+0000').replace(/,/, '').replace(/(\\w{3}) (\\w{3}) (\\d{2}) (\\d{4}) (\\d{2}:\\d{2}:\\d{2})/, '$1 $2 $3 $5 +0000 $4') }}",
              "type": "string"
            },
            {
              "id": "547e2bf2-934e-439c-ad7c-df013576f120",
              "name": "created_at",
              "value": "={{ $json.tweets.createdAt }}",
              "type": "string"
            },
            {
              "id": "7c00968d-e708-4b7c-8844-8d8cff3dea5a",
              "name": "tweet_url",
              "value": "={{ $json.tweets.url }}",
              "type": "string"
            },
            {
              "id": "104c10d0-0a00-425d-985b-73adf3c14773",
              "name": "author_username",
              "value": "={{ $json.tweets.author.userName }}",
              "type": "string"
            },
            {
              "id": "f44b5799-54fa-4c91-ba7a-eb8e061bcf7b",
              "name": "author_followers",
              "value": "={{ $json.tweets.author.followers }}",
              "type": "string"
            },
            {
              "id": "a0134c1b-fb1f-4eca-aeb4-9e1754b9113a",
              "name": "like_count",
              "value": "={{ $json.tweets.likeCount }}",
              "type": "string"
            },
            {
              "id": "066eebb9-aa76-43c1-8283-6a1335b6731e",
              "name": "retweet_count",
              "value": "={{ $json.tweets.retweetCount }}",
              "type": "string"
            },
            {
              "id": "7cc5f5d3-a56d-4674-b8d2-880fd45dc53e",
              "name": "bookmark_count",
              "value": "={{ $json.tweets.bookmarkCount }}",
              "type": "string"
            },
            {
              "id": "efa36c5b-ee1f-4e97-8328-456c5a1d4b6c",
              "name": "view_count",
              "value": "={{ $json.tweets.viewCount }}",
              "type": "string"
            },
            {
              "id": "c9bcde2b-0488-4e54-b9aa-6a8a8c19ad22",
              "name": "quote_count",
              "value": "={{ $json.tweets.quoteCount }}",
              "type": "string"
            },
            {
              "id": "6561214f-26df-4e44-8b4a-3f8bf06847b8",
              "name": "conversation_id",
              "value": "={{ $json.tweets.conversationId }}",
              "type": "string"
            },
            {
              "id": "553ee9c8-59b7-4932-b9e7-d1c8e699a177",
              "name": "has_media",
              "value": "={{ ($json.tweets.extendedEntities && Array.isArray($json.tweets.extendedEntities.media) && $json.tweets.extendedEntities.media.length > 0) ? true : false }}",
              "type": "string"
            },
            {
              "id": "6996318a-7c65-4dda-a742-21a82fe6207d",
              "name": "media_type",
              "value": "={{ ($json.tweets.extendedEntities && $json.tweets.extendedEntities.media && $json.tweets.extendedEntities.media[0]) ? $json.tweets.extendedEntities.media[0].type : null }}",
              "type": "string"
            },
            {
              "id": "560ad3c2-8af8-4a80-b1b6-8091d1fc2e45",
              "name": "media_urls",
              "value": "={{ ($json.tweets.extendedEntities && $json.tweets.extendedEntities.media) ? $json.tweets.extendedEntities.media.map(m => m.url).join(', ') : null }}",
              "type": "string"
            },
            {
              "id": "d96a7640-1a73-4142-9a80-4fe0a3ba9d5f",
              "name": "external_links",
              "value": "={{ ($json.tweets.entities && $json.tweets.entities.urls && $json.tweets.entities.urls.length > 0) ? $json.tweets.entities.urls.map(u => u.expanded_url).join(', ') : null }}",
              "type": "string"
            },
            {
              "id": "ec1b19b7-0fc2-4233-9708-3bf8b452999b",
              "name": "topic",
              "value": "={{ $('Set API Query').first().json.topic }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1160,
        -60
      ],
      "id": "4abab152-91a6-4783-81e8-f59e04d0f27d",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "fieldToSplitOut": "tweets",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        920,
        -60
      ],
      "id": "addf66a7-a847-49bc-82b7-02ed4c2a28f3",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "// Engagement Score Calculator with Freshness Factor (0-100 scale)\nconst tweets = $input.all();\nconst scoredTweets = [];\n\n// Get all tweets for normalization\nconst allTweets = tweets.map(item => item.json);\nconst viewCounts = allTweets.map(t => parseInt(t.view_count) || 1);\nconst followerCounts = allTweets.map(t => parseInt(t.author_followers) || 1);\n\nconst maxViews = Math.max(...viewCounts);\nconst maxFollowers = Math.max(...followerCounts);\n\nfor (const item of tweets) {\n    const tweet = item.json;\n    \n    // Parse numeric values\n    const likes = parseInt(tweet.like_count) || 0;\n    const retweets = parseInt(tweet.retweet_count) || 0;\n    const bookmarks = parseInt(tweet.bookmark_count) || 0;\n    const views = parseInt(tweet.view_count) || 1;\n    const quotes = parseInt(tweet.quote_count) || 0;\n    const followers = parseInt(tweet.author_followers) || 1;\n    \n    // FRESHNESS CALCULATION\n    const now = new Date();\n    const tweetDate = new Date(tweet.created_at);\n    const hoursOld = (now - tweetDate) / (1000 * 60 * 60);\n    const daysOld = hoursOld / 24;\n    \n    // Freshness multiplier (decays over time)\n      // for now set to 1 as we want the agent to deide\n    let freshnessMultiplier = 1.0;\n    \n    //if (daysOld <= 1) {\n    //    freshnessMultiplier = 1.2;      // 20% boost for content < 1 day\n    //} else if (daysOld <= 3) {\n        //freshnessMultiplier = 1.1;      // 10% boost for content < 3 days\n    //} else if (daysOld <= 7) {\n        //freshnessMultiplier = 1.0;      // No change for content < 1 week\n    //} else if (daysOld <= 14) {\n          //freshnessMultiplier = 0.8;      // 20% penalty for content < 2 weeks\n    //} else if (daysOld <= 30) {\n        //freshnessMultiplier = 0.6;      // 40% penalty for content < 1 month\n   //} else if (daysOld <= 90) {\n        // freshnessMultiplier = 0.4;      // 60% penalty for content < 3 months\n    // } else {\n        // freshnessMultiplier = 0.3;      // 70% penalty for content > 3 months\n    //}\n    \n    // Core engagement calculation\n    const totalEngagements = likes + retweets + bookmarks + quotes;\n    const engagementRate = (totalEngagements / views) * 100;\n    \n    // Base scoring (before freshness)\n    const engagementScore = Math.min(engagementRate * 10, 40);\n    \n    const bookmarkRate = (bookmarks / views) * 100;\n    const bookmarkScore = Math.min(bookmarkRate * 12.5, 25);\n    \n    const amplificationRate = ((retweets + quotes) / views) * 100;\n    const amplificationScore = Math.min(amplificationRate * 10, 20);\n    \n    const authorityScore = (followers / maxFollowers) * 10;\n    \n    let mediaBonus = 0;\n    if (tweet.has_media === \"true\") {\n        mediaBonus = tweet.media_type === \"video\" ? 5 : 3;\n    }\n    \n    // Viral bonuses\n    let viralBonus = 0;\n    if (likes > 1000) viralBonus = 10;\n    if (likes > 5000) viralBonus = 20;\n    if (likes > 10000) viralBonus = 30;\n    \n    // Base score (before freshness)\n    const baseScore = engagementScore + bookmarkScore + amplificationScore + authorityScore + mediaBonus + viralBonus;\n    \n    // Apply freshness multiplier\n    const finalScore = Math.min(Math.round(baseScore * freshnessMultiplier), 100);\n    \n    scoredTweets.push({\n        json: {\n            ...tweet,\n            engagement_score: finalScore,\n            days_old: Math.round(daysOld * 10) / 10,  // Round to 1 decimal\n            freshness_multiplier: Math.round(freshnessMultiplier * 100) / 100,  // Round to 2 decimals\n            base_score: Math.round(baseScore)  // Score before freshness\n        }\n    });\n}\n\n// Sort by engagement score (highest first)\nscoredTweets.sort((a, b) => b.json.engagement_score - a.json.engagement_score);\n\nreturn scoredTweets;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        -60
      ],
      "id": "690c282b-78fc-4c64-84be-b6b040845fa3",
      "name": "Add Score"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Analytics Code Node with Dynamic Benchmarks\nconst tweets = $input.all();\nconst enhancedTweets = [];\n\n// First pass: Calculate all metrics\nfor (const item of tweets) {\n    const tweet = item.json;\n    \n    // Parse numbers safely\n    const likes = parseInt(tweet.like_count) || 0;\n    const retweets = parseInt(tweet.retweet_count) || 0;\n    const bookmarks = parseInt(tweet.bookmark_count) || 0;\n    const quotes = parseInt(tweet.quote_count) || 0;\n    const views = parseInt(tweet.view_count) || 1;\n    \n    // Calculate engagement metrics\n    const totalEngagements = likes + retweets + bookmarks + quotes;\n    const engagementRate = parseFloat(((totalEngagements / views) * 100).toFixed(2));\n    const bookmarkRate = parseFloat(((bookmarks / views) * 100).toFixed(2));\n    const amplificationRate = parseFloat((((retweets + quotes) / views) * 100).toFixed(2));\n    \n    // Thread detection\n    const text = tweet.tweet_text;\n    const threadIndicator = \n        text.includes(\"🧵\") ||\n        text.match(/\\d+\\/\\d+/) ||\n        text.includes(\"Thread:\") ||\n        text.includes(\"THREAD\") ||\n        (tweet.conversation_id !== tweet.tweet_id)\n        ? \"thread\" : \"single\";\n\n    // Content type analysis\n    let contentType = \"educational\";\n    if (text.includes(\"comment\") || text.includes(\"follow\")) {\n        contentType = \"engagement_bait\";\n    } else if (text.includes(\"$\") || text.includes(\"money\")) {\n        contentType = \"monetization\";\n    } else if (text.includes(\"here's\") || text.includes(\"setup\")) {\n        contentType = \"tutorial\";\n    }\n    \n    // Call to action detection\n    const hasCallToAction = /comment|follow|repost|dm|share|like this/i.test(text);\n    \n    // Viral status based on engagement score\n    let viralStatus = \"low\";\n    if (tweet.engagement_score >= 80) viralStatus = \"viral\";\n    else if (tweet.engagement_score >= 60) viralStatus = \"high\";\n    else if (tweet.engagement_score >= 40) viralStatus = \"medium\";\n    \n    enhancedTweets.push({\n        json: {\n            ...tweet,\n            engagement_rate: engagementRate,\n            bookmark_rate: bookmarkRate,\n            amplification_rate: amplificationRate,\n            thread_indicator: threadIndicator,\n            content_type: contentType,\n            call_to_action: hasCallToAction,\n            viral_status: viralStatus\n        }\n    });\n}\n\n// Second pass: Calculate benchmarks from all tweets\nconst allTweets = enhancedTweets.map(item => item.json);\nconst engagementRates = allTweets.map(t => t.engagement_rate).sort((a, b) => a - b);\nconst bookmarkRates = allTweets.map(t => t.bookmark_rate).sort((a, b) => a - b);\nconst amplificationRates = allTweets.map(t => t.amplification_rate).sort((a, b) => a - b);\n\n// Calculate percentiles\nfunction getPercentile(arr, percentile) {\n    const index = Math.ceil((percentile / 100) * arr.length) - 1;\n    return arr[Math.max(0, index)];\n}\n\n// Create dynamic benchmarks\nconst benchmarks = {\n    engagement_rate: {\n        poor: getPercentile(engagementRates, 25),      // Bottom 25%\n        average: getPercentile(engagementRates, 50),    // Median\n        good: getPercentile(engagementRates, 75),       // Top 25%\n        excellent: getPercentile(engagementRates, 90)   // Top 10%\n    },\n    bookmark_rate: {\n        poor: getPercentile(bookmarkRates, 25),\n        average: getPercentile(bookmarkRates, 50),\n        good: getPercentile(bookmarkRates, 75),\n        excellent: getPercentile(bookmarkRates, 90)\n    },\n    amplification_rate: {\n        poor: getPercentile(amplificationRates, 25),\n        average: getPercentile(amplificationRates, 50),\n        good: getPercentile(amplificationRates, 75),\n        excellent: getPercentile(amplificationRates, 90)\n    }\n};\n\n// BENCHMARKS FOR REFERENCE:\n// These are calculated dynamically from your dataset\n// Example output might look like:\n// engagement_rate: { poor: 1.2, average: 2.8, good: 4.5, excellent: 6.2 }\n// bookmark_rate: { poor: 0.3, average: 1.1, good: 2.4, excellent: 3.8 }\n// amplification_rate: { poor: 0.1, average: 0.2, good: 0.4, excellent: 0.8 }\n\n// Third pass: Add performance classifications\nconst finalTweets = enhancedTweets.map(item => {\n    const tweet = item.json;\n    \n    // Classify engagement rate\n    let engagementClass = 'poor';\n    if (tweet.engagement_rate >= benchmarks.engagement_rate.excellent) engagementClass = 'excellent';\n    else if (tweet.engagement_rate >= benchmarks.engagement_rate.good) engagementClass = 'good';\n    else if (tweet.engagement_rate >= benchmarks.engagement_rate.average) engagementClass = 'average';\n    \n    // Classify bookmark rate\n    let bookmarkClass = 'poor';\n    if (tweet.bookmark_rate >= benchmarks.bookmark_rate.excellent) bookmarkClass = 'excellent';\n    else if (tweet.bookmark_rate >= benchmarks.bookmark_rate.good) bookmarkClass = 'good';\n    else if (tweet.bookmark_rate >= benchmarks.bookmark_rate.average) bookmarkClass = 'average';\n    \n    // Classify amplification rate\n    let amplificationClass = 'poor';\n    if (tweet.amplification_rate >= benchmarks.amplification_rate.excellent) amplificationClass = 'excellent';\n    else if (tweet.amplification_rate >= benchmarks.amplification_rate.good) amplificationClass = 'good';\n    else if (tweet.amplification_rate >= benchmarks.amplification_rate.average) amplificationClass = 'average';\n    \n    // Overall performance score (for agent decision making)\n    let overallPerformance = 'poor';\n    const classScores = {\n        'poor': 1,\n        'average': 2,\n        'good': 3,\n        'excellent': 4\n    };\n    \n    const avgScore = (classScores[engagementClass] + classScores[bookmarkClass] + classScores[amplificationClass]) / 3;\n    \n    if (avgScore >= 3.5) overallPerformance = 'excellent';\n    else if (avgScore >= 2.5) overallPerformance = 'good';\n    else if (avgScore >= 1.5) overallPerformance = 'average';\n    \n    return {\n        json: {\n            ...tweet,\n            engagement_class: engagementClass,\n            bookmark_class: bookmarkClass,\n            amplification_class: amplificationClass,\n            overall_performance: overallPerformance\n        }\n    };\n});\n\nreturn finalTweets;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        -60
      ],
      "id": "fca7e9da-ec7d-4a1d-b784-a2bbcd5ad4a0",
      "name": "Add Rates & Indicators"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e8d17d4e-345b-4428-90ee-ecaa6f0c35f6",
              "leftValue": "={{ $json.thread_indicator }}",
              "rightValue": "thread",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1840,
        -60
      ],
      "id": "694dd4b0-862f-4807-ac52-d3b333ed9724",
      "name": "If Thread"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            },
            {
              "name": "limit",
              "value": "={{ $json.limit }}"
            },
            {
              "name": "result_type",
              "value": "={{ $json.result_type }}"
            }
          ]
        },
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Accept\": \"application/json\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        700,
        -60
      ],
      "id": "24806ffc-8f4b-43cd-a05e-dec947c1fbea",
      "name": "Get Tweets",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y9mqglloyte4NEfz",
          "name": "Twitter API"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "14770443-872a-4d20-bf8b-927263c2801d",
              "name": "query",
              "value": "={{ $json.topic }} ((-filter:replies min_retweets:2 min_faves:30) OR (filter:self_threads min_faves:15)) lang:en -spam -promotional -\"follow me\" -bot -\"dm me\" -\"link in bio\" within_time:24h",
              "type": "string"
            },
            {
              "id": "6f64d503-5b18-48ed-9898-ea6a44701fb7",
              "name": "limit",
              "value": 10,
              "type": "number"
            },
            {
              "id": "884d3ac4-bbdd-4b35-b1e4-11531c9465a2",
              "name": "result_type",
              "value": "top",
              "type": "string"
            },
            {
              "id": "bc16ed32-f357-49c3-bb16-f48764fb82bc",
              "name": "topic",
              "value": "={{ $json.topic }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        -60
      ],
      "id": "c5337c57-c98b-4727-a04d-40121cc32917",
      "name": "Set API Query"
    },
    {
      "parameters": {
        "jsCode": "// Ultra Simple Thread Builder\nconst data = $input.first().json;\nconst tweets = data.tweets || [];\n\n// Get author from first tweet\nconst author = tweets[0]?.author?.userName;\n\n// Filter author's tweets and sort\nconst authorTweets = tweets\n    .filter(t => t.author.userName === author)\n    .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n\n// Build text\nlet text = '';\nauthorTweets.forEach((tweet, i) => {\n    if (i === 0 && !tweet.isReply) {\n        text = tweet.text;\n    } else {\n        const num = i + 1;\n        text += text ? `\\n\\n(${num}) ${tweet.text}` : `(${num}) ${tweet.text}`;\n    }\n});\n\n// Use first tweet's data as template\nconst firstTweet = authorTweets[0];\n\nreturn [{\n    json: {\n        tweet_text: text,\n        tweet_id: firstTweet.id,\n        author_username: author,\n        like_count: firstTweet.likeCount.toString(),\n        retweet_count: firstTweet.retweetCount.toString(),\n        bookmark_count: firstTweet.bookmarkCount.toString(),\n        view_count: firstTweet.viewCount.toString(),\n        has_next_page: data.has_next_page,\n        next_cursor: data.next_cursor\n    }\n}];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2860,
        -160
      ],
      "id": "12c2c3fb-04d6-4145-bf94-e9a167dd6d70",
      "name": "Code"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/thread_context",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=tweetId",
              "value": "={{ $json.tweet_id }}"
            }
          ]
        },
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Accept\": \"application/json\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2520,
        -140
      ],
      "id": "65e020c3-e8cb-4fc3-a8d7-c6eb51432119",
      "name": "Get Thread Reply",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y9mqglloyte4NEfz",
          "name": "Twitter API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c9eb8b1-0862-4694-9984-a02fa323ab38",
              "leftValue": "={{ $json.has_next_page }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3140,
        20
      ],
      "id": "f2dea46d-bee8-44ba-87f4-ed478605a6ca",
      "name": "If"
    },
    {
      "parameters": {
        "url": "https://api.twitterapi.io/twitter/tweet/advanced_search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "n8n (conversation_id:1943682338250194983)"
            },
            {
              "name": "limit",
              "value": "=20"
            },
            {
              "name": "result_type",
              "value": "top"
            }
          ]
        },
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"Accept\": \"application/json\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2160,
        -400
      ],
      "id": "f34760b2-54db-43e0-a1f9-3207703490fb",
      "name": "Get Tweets1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y9mqglloyte4NEfz",
          "name": "Twitter API"
        }
      }
    }
  ],
  "pinData": {
    "Edit Fields": [
      {
        "json": {
          "tweet_text": "Newgen is a classic example where a product gets into a higher orbit once it achieves the critical mass. It has very clearly repositioned itself from the edge of business to \"at the core\". \n\nThere are many process automation tools available - both enterprise & non-enterprise. N8N being most popular in non-enterprise space and then within enterprise software, OEMs have their own process automation platforms. \n\nWhere companies like Newgen gets the edge is not with the tech, but the years of insights of how to use underlying data and where to provision embedded AI capabilities. Launching agentic services becomes as easy as adding 2+2 eventually. All the hard-work that was done between 2020-2023 has culminated into something that has its own standing. Those who could envision ahead in time are the winners!! What a winner.",
          "tweet_id": "1943947030813950117",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Sat Jul 12 08:14:23 +0000 2025",
          "tweet_url": "https://x.com/Finstor85/status/1943947030813950117",
          "author_username": "Finstor85",
          "author_followers": "42131",
          "like_count": "76",
          "retweet_count": "6",
          "bookmark_count": "18",
          "view_count": "5299",
          "quote_count": "0",
          "conversation_id": "1943947030813950117",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/Pa3IDHbDk0",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "🚀 AUTOMATE Your Socials — FREE GUIDE🚀\n\nPost to LinkedIn, X, IG, FB &amp; more — hands-free with AI + n8n ⚙️\n\n🎁 Get the full workflow + setup visual FREE!\n\nTo claim:👇\n\n1️⃣ Like ❤️\n2️⃣ Retweet 🔁\n3️⃣ Comment “AUTO”\n4️⃣ Follow (for DM)\n\n⏳ First 100 only — act fast! https://t.co/ETShc437gn",
          "tweet_id": "1943907452392530198",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Sat Jul 12 05:37:07 +0000 2025",
          "tweet_url": "https://x.com/mamuncoder/status/1943907452392530198",
          "author_username": "mamuncoder",
          "author_followers": "2146",
          "like_count": "54",
          "retweet_count": "24",
          "bookmark_count": "5",
          "view_count": "2119",
          "quote_count": "0",
          "conversation_id": "1943907452392530198",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/ETShc437gn",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "🔥 Automate Your Entire Social Media in 1 Click with AI + N8N\n\nNo more posting manually across platforms.\n\nThis AI-powered workflow writes, designs, and schedules viral content for LinkedIn, Instagram, X, Facebook & more — all from one dashboard.\n\n✅ GPT-4o generates platform-specific posts\n✅ Auto-scheduling across all social channels\n✅ Custom hooks, captions & hashtags\n✅ Google Sheets integration for tracking\n✅ Fully automated – just plug & run\n\nPerfect for creators, agencies, and brands scaling fast.\n\nRetweet + Like+ Comment “Agent”. Must Follow so I’ll DM you.",
          "tweet_id": "1943856974262940009",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Sat Jul 12 02:16:32 +0000 2025",
          "tweet_url": "https://x.com/Sitara_AI7/status/1943856974262940009",
          "author_username": "Sitara_AI7",
          "author_followers": "2137",
          "like_count": "128",
          "retweet_count": "68",
          "bookmark_count": "70",
          "view_count": "5985",
          "quote_count": "0",
          "conversation_id": "1943856974262940009",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/Yfe9Fl2Rgh",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "🚨 BREAKING: I just cracked the code on FREE leads! 🔥\n\nThis N8N + AI combo is INSANE! 😱\n\n500 leads in seconds? ✅ \nCosts 41 cents? ✅ \nAI writes emails? ✅\n\nGoogle Maps, LinkedIn, Instagram - it scrapes EVERYTHING! 🤖\n\nMy exact template? Link below! 👇 https://t.co/qY4ZGiB1lz",
          "tweet_id": "1943797820643062259",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 22:21:29 +0000 2025",
          "tweet_url": "https://x.com/JulianGoldieSEO/status/1943797820643062259",
          "author_username": "JulianGoldieSEO",
          "author_followers": "85585",
          "like_count": "56",
          "retweet_count": "6",
          "bookmark_count": "94",
          "view_count": "4657",
          "quote_count": "0",
          "conversation_id": "1943797820643062259",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/qY4ZGiB1lz",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "The 12 Rules for n8n\n\nAgents, Webhooks, Integrations, HTTP Requests\n\nAnd More https://t.co/ugvToHlWjL",
          "tweet_id": "1943783878952677466",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 21:26:05 +0000 2025",
          "tweet_url": "https://x.com/muhammad_zulali/status/1943783878952677466",
          "author_username": "muhammad_zulali",
          "author_followers": "391",
          "like_count": "60",
          "retweet_count": "10",
          "bookmark_count": "109",
          "view_count": "6501",
          "quote_count": "0",
          "conversation_id": "1943783878952677466",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/ugvToHlWjL, https://t.co/ugvToHlWjL, https://t.co/ugvToHlWjL",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "I just scraped 50 local dentists in 60 seconds.\n\nNo coding, no expensive tools—completely FREE 🎯\n\nTHE EXACT PROCESS:\n\n1️⃣ Set up N8N HTTP request (POST method)\n2️⃣ Connect Apify's Google Maps scraper\n3️⃣ Configure search terms + location filters\n4️⃣ Auto-map data to Google Sheets\n5️⃣ Generate AI-powered outreach emails\n\nResults: Complete lead database with phone numbers, emails, and addresses in minutes.\n\nSave this post, it will save you thousands on lead gen tools 💡\n\nWant the full guide? DM me. 📥",
          "tweet_id": "1943777320600289560",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 21:00:01 +0000 2025",
          "tweet_url": "https://x.com/JulianGoldieSEO/status/1943777320600289560",
          "author_username": "JulianGoldieSEO",
          "author_followers": "85585",
          "like_count": "521",
          "retweet_count": "63",
          "bookmark_count": "1127",
          "view_count": "35023",
          "quote_count": "0",
          "conversation_id": "1943777320600289560",
          "has_media": "true",
          "media_type": "video",
          "media_urls": "https://t.co/mFobS5LC8L",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "Software engineers are F%$#&D\n\nI just made this FULLY working app in 30 minutes and closing in on $10K MRR using Vibecode and n8n.\n\nThis simple landscaping app tracks customer appointments, billing, and support for both the owner and clients. I've closed on 4 clients so far.\n\nLet me know if you guys want to see a tutorial!\n\nSWE ngmi",
          "tweet_id": "1943747466350014957",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 19:01:23 +0000 2025",
          "tweet_url": "https://x.com/muhammad_zulali/status/1943747466350014957",
          "author_username": "muhammad_zulali",
          "author_followers": "391",
          "like_count": "107",
          "retweet_count": "9",
          "bookmark_count": "202",
          "view_count": "11892",
          "quote_count": "1",
          "conversation_id": "1943747466350014957",
          "has_media": "true",
          "media_type": "video",
          "media_urls": "https://t.co/qT23ewYuLa",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "n8n Complete Beginners Guide\n\nAgents, Webhooks, Integrations, HTTP Requests...\n\nAnd more.\n\n00:00 Introduction\n01:44 The Rise of n8n and agent builders\n04:21 The basics of n8n Workflows\n08:14 Your First Workflow\n10:11 Advanced Workflow Techniques\n13:00 Integrating External APIs and Webhooks\n23:53 Testing and Troubleshooting Workflows\n32:55 n8n Templates and Initial Setup\n33:16 Publishing and Automating with Dropbox\n33:30 Introducing AI Agents\n34:39 Setting Up AI Agent Prompts\n38:07 Integrating Notion with AI Agents\n44:53 Creating and Testing AI Workflows\n54:13 Advanced AI Agent Integrations",
          "tweet_id": "1943744716954382610",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 18:50:28 +0000 2025",
          "tweet_url": "https://x.com/rileybrown_ai/status/1943744716954382610",
          "author_username": "rileybrown_ai",
          "author_followers": "80447",
          "like_count": "3082",
          "retweet_count": "526",
          "bookmark_count": "6306",
          "view_count": "152561",
          "quote_count": "6",
          "conversation_id": "1943744716954382610",
          "has_media": "true",
          "media_type": "video",
          "media_urls": "https://t.co/ZzuIPrwCIE",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "I just sent out this week's \"5 freeCodeCamp resources worth your time\" 🏗️. Some heaters in here including a 2-hour course on agentic \"vibe coding\" with n8n and a soil moisture Arduino project.\n\n1. freeCodeCamp just published this comprehensive course that will teach you how to build apps using the LAMP Stack – Linux, Apache, MySQL, PHP. This is a classic toolchain that a huge number of websites still use to this day. You can code along at home and build your own clone of Google Calendar – complete with multi-appointment support and booking conflict logic. Then you'll use JavaScript to add a dynamic user interface. This project will help you expand your horizons and get in some serious reps. (3 hour YouTube course): https://t.co/jnnOwXDWTh\n\n2. You may have heard the term “vibe coding”, where you write the specifications for your app, then hand it over to code generation agents who write the code for you. This approach has been a bit polarizing in the developer community, with vocal critics and vocal advocates. My advice is don't listen to any of them. Think for yourself. freeCodeCamp just published this course that will introduce you to vibe coding tools like n8n – an open source workflow automation tool – so you can wire together APIs and services without needing to write a ton of code manually. (2 hour YouTube course): https://t.co/13mWijnYmg\n\n3. On this week's podcast I interview Joe Hill. He's a software engineer who works on a data platform for NASA. Joe taught himself programming for 4 years while working as a janitor. As the single father of two Autistic boys, he first used his programming skills to build an iPad app to help them learn how to talk. He shares tons of practical tips for learning new skills and for getting things done inside big orgs. (1 hour watch or listen in your favorite podcast app): https://t.co/oxl8ZItGZV\n\n4. Learn how to write Python tests so you can make your codebase more robust. This tutorial will teach you the basics of pytest and show you tons of examples. You'll learn about Markers, Fixtures, Parameterization, and more. (20 minute read): https://t.co/a3yi9SY3zJ\n\n5. Tell your gardener friends: freeCodeCamp just published a tutorial on how to monitor the moisture of your soil using an Arduino microcontroller. This tutorial will show you what hardware to get and how to wire it up. Then it'll walk you through the code you'll run, and explain how everything works. (30 minute read): https://t.co/QLWSxd6a9N\n\nThe freeCodeCamp community is working hard to bring you new courses each week on pretty much everything. If you want to help our charity create even more open source learning resources, you should support our mission directly: https://t.co/PJXlqTfPxH\n\nQuote of the Week: \n“Becoming tool agnostic is one of the biggest strengths you will ever have as a programmer. If you walk into a place and they say “we use XYZ”, you can go “Great. I'll learn it.” That is so powerful.” — Software Engineer Joe Hill on this week's freeCodeCamp podcast",
          "tweet_id": "1943698737882386434",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 15:47:45 +0000 2025",
          "tweet_url": "https://x.com/ossia/status/1943698737882386434",
          "author_username": "ossia",
          "author_followers": "291446",
          "like_count": "90",
          "retweet_count": "12",
          "bookmark_count": "44",
          "view_count": "8380",
          "quote_count": "0",
          "conversation_id": "1943698737882386434",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/uWYsKAj49x",
          "external_links": "https://www.freecodecamp.org/news/build-a-google-calendar-clone-with-php-mysql-and-javascript/, https://www.freecodecamp.org/news/how-to-vibe-code-with-help-from-n8n/, https://www.freecodecamp.org/news/from-freecodecamp-to-nasa-with-data-engineer-joe-hill-podcast-178/, https://www.freecodecamp.org/news/how-to-use-pytest-a-guide-to-testing-in-python/, https://www.freecodecamp.org/news/how-to-use-a-resistive-soil-moisture-sensor/, https://www.freecodecamp.org/donate",
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "the n8n automation ecosystem if FULL of fake gurus...\n\nthey can't show you how to build workflows because most of them are STOLEN, and they certainly can't teach you how to find clients\n\nhere's a blueprint to go from $0 to $10k/mo selling n8n workflows:\n\na thread 🧵",
          "tweet_id": "1943682338250194983",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 14:42:35 +0000 2025",
          "tweet_url": "https://x.com/EXM7777/status/1943682338250194983",
          "author_username": "EXM7777",
          "author_followers": "11187",
          "like_count": "449",
          "retweet_count": "31",
          "bookmark_count": "1040",
          "view_count": "46120",
          "quote_count": "3",
          "conversation_id": "1943682338250194983",
          "has_media": "false",
          "media_type": null,
          "media_urls": null,
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "For the next 24 hours you can STEAL my n8n swipe file containing 12+ automation's.\n\nAll of these can be setup within 60 MINS and SAVE you 10+ HOURS per week.\n\nEasily worth $997+\nToday It's yours for FREE\n\n👉RT + Like &amp; Comment “n8n” and I’ll DM you the file\n(Must be following) https://t.co/JEZp1QRA6r",
          "tweet_id": "1943681286062965180",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 14:38:25 +0000 2025",
          "tweet_url": "https://x.com/marryevan999/status/1943681286062965180",
          "author_username": "marryevan999",
          "author_followers": "2567",
          "like_count": "44",
          "retweet_count": "25",
          "bookmark_count": "5",
          "view_count": "815",
          "quote_count": "0",
          "conversation_id": "1943681286062965180",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/JEZp1QRA6r",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "There’s no single course that combines Notion, Zapier, Airtable, n8n, and https://t.co/hqZ3gkdiqQ into one practical learning experience, except @skill_afrika_ \nbootcamp\n\nAfter 9 weeks of intense learning, hands-on teaching, and real-world practice, Skill Afrika’s Workflow Automation Bootcamp wraps up today.\n\nWhat a journey. What an experience. On to the next.",
          "tweet_id": "1943660305092919490",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 13:15:02 +0000 2025",
          "tweet_url": "https://x.com/omoalhajaabiola/status/1943660305092919490",
          "author_username": "omoalhajaabiola",
          "author_followers": "140129",
          "like_count": "237",
          "retweet_count": "40",
          "bookmark_count": "125",
          "view_count": "21107",
          "quote_count": "9",
          "conversation_id": "1943660305092919490",
          "has_media": "false",
          "media_type": null,
          "media_urls": null,
          "external_links": "http://Make.com",
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "💰 $153K in 60 Days from WhatsApp!\nNo team. No calls. Just 1 N8N workflow.\nIt scrapes leads → Writes AI DMs → Sends 10K msgs/day.\n\n🔥 Solo founders &amp; agencies are scaling FAST.\n\n👇 Comment “SALES” + Like\nI'll DM the full workflow (must follow) https://t.co/b80A24dQCv",
          "tweet_id": "1943660282191991012",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 13:14:57 +0000 2025",
          "tweet_url": "https://x.com/AsifAli_51/status/1943660282191991012",
          "author_username": "AsifAli_51",
          "author_followers": "105",
          "like_count": "136",
          "retweet_count": "31",
          "bookmark_count": "73",
          "view_count": "9088",
          "quote_count": "1",
          "conversation_id": "1943660282191991012",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/b80A24dQCv",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "I just finished setting up an AI Agent that processes 100+ client documents daily for agencies, SaaS and ecom businesses (in n8n)\n\nIt extracts data, sends emails, and handles document workflows without the need to do it manually\n\nComplete AI automation that saves 35+ hours/week on client paperwork\n\nYou can also use it for reporting of any type\n\n- Auto-extracts text from PDFs\n- Processes multiple file formats\n- Sends automated email responses\n- Routes documents intelligently\n\nThis AI workflow saves $80K+/year in processing costs\n\nWant it FREE?\n\n👉 RT + Like & Comment \"WORKFLOW\" and I'll DM the JSON file + doc to you ASAP\n\nNo opt-in, no BS\n\n(Must follow)",
          "tweet_id": "1943656052311876013",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 12:58:08 +0000 2025",
          "tweet_url": "https://x.com/dashboardlim/status/1943656052311876013",
          "author_username": "dashboardlim",
          "author_followers": "11216",
          "like_count": "255",
          "retweet_count": "109",
          "bookmark_count": "232",
          "view_count": "17289",
          "quote_count": "1",
          "conversation_id": "1943656052311876013",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/dSrQCOHD7y",
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "N8N: AI Agent Creation Guide\nCreate intelligent, memory-driven AI agents using N8N, and connect them with tools like Gmail, Google Calendar, and more\n\nCoupon code is 11JULY2025\n\nhttps://t.co/bYLi2iTrJT",
          "tweet_id": "1943647691055005770",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 12:24:55 +0000 2025",
          "tweet_url": "https://x.com/omoalhajaabiola/status/1943647691055005770",
          "author_username": "omoalhajaabiola",
          "author_followers": "140129",
          "like_count": "91",
          "retweet_count": "15",
          "bookmark_count": "80",
          "view_count": "9353",
          "quote_count": "0",
          "conversation_id": "1943647691055005770",
          "has_media": "false",
          "media_type": null,
          "media_urls": null,
          "external_links": "https://www.udemy.com/course/n8n-ai-agent-creation-guide/?couponCode=11JULY2025",
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "If I were launching a services business today, here are the 9 tools I'd use to hit $1M in year one:\n\n1/ @n8n_io - Build an AI workforce. Automate proposals, client onboarding, reporting. We saved 20 hours/week on repetitive tasks within month one.\n\n2/ @SpaceChenst - Your outsourced finance department. Real-time P&L by client, cash flow forecasting, and fractional CFO guidance. Know your margins before they know you.\n\n3/ @NotionHQ - Operating system for everything. Client wiki, project tracking, SOPs, team knowledge base. Start with templates, customize as you scale.\n\n4/ @WisprFlow - Dictate proposals/emails/anything 3x faster than typing. Perfect for busy founders.\n\n5/ @useMotion - Calendar that thinks. Auto-schedules tasks around client meetings, ensures nothing drops. Like having an EA before you can afford one.\n\n6/ @TallyForms - Beautiful forms with conditional logic, payment collection, and Notion integration. Goodbye, Google Forms.\n\n7/ @Loom - Async communication superpower. Record SOPs once, use forever. Client updates in 2 minutes vs 30-minute calls.\n\n8/ @Mixpanel - Track what matters. Which services drive retention? What's your client LTV? Data-driven decisions from day one.\n\n9/ @Mercury - Banking that scales. Virtual cards for each client project, expense management built-in. Clean books from the start.\n\nWhat should I add to this list?",
          "tweet_id": "1943641900973748596",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 12:01:54 +0000 2025",
          "tweet_url": "https://x.com/jspujji/status/1943641900973748596",
          "author_username": "jspujji",
          "author_followers": "178958",
          "like_count": "154",
          "retweet_count": "19",
          "bookmark_count": "608",
          "view_count": "28121",
          "quote_count": "2",
          "conversation_id": "1943641900973748596",
          "has_media": "false",
          "media_type": null,
          "media_urls": null,
          "external_links": null,
          "topic": "n8n"
        }
      },
      {
        "json": {
          "tweet_text": "I just merged all top n8n automations that help creators earn $10K/month on autopilot.\n\nCan’t believe I’m about to reveal this to everyone.\n\nCheck this out:\n\n→ Auto-generates high-converting hooks & captions with ChatGPT\n→ Dynamically creates AI images based on your posts (yes, like memes... but juiced)\n→ Logs everything — prompts, captions, images, platform info — into a clean Google Sheet (so you look smart)\n→ Prepares ready-to-approve HTML email previews for clients or team\n→ Routes final posts straight to TikTok, Instagram, LinkedIn, YouTube Shorts, X, Threads (it’s like a content octopus 🐙)\n→ Archives every post to Google Drive for future use (hello, content repurposing heaven)\n\nNo Zapier. No VA burnout. \n\nNo duct-tape spaghetti mess.\n\nLike + reply “YES” & I’ll send you the FULL workflow + setup FREE!",
          "tweet_id": "1943621446317871425",
          "date_collected": "Sat 12 Jul 2025 10:27:21 +0000",
          "created_at": "Fri Jul 11 10:40:38 +0000 2025",
          "tweet_url": "https://x.com/JulianGoldieSEO/status/1943621446317871425",
          "author_username": "JulianGoldieSEO",
          "author_followers": "85585",
          "like_count": "570",
          "retweet_count": "71",
          "bookmark_count": "519",
          "view_count": "44065",
          "quote_count": "3",
          "conversation_id": "1943621446317871425",
          "has_media": "true",
          "media_type": "photo",
          "media_urls": "https://t.co/Gg7wCOq0iI",
          "external_links": null,
          "topic": "n8n"
        }
      }
    ]
  },
  "repo_name": "n8n",
  "repo_owner": "thalderg",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-07-14T12:56:24.000Z",
  "versionId": "2b25cf0a-e2d5-4f86-a1a2-3c207edd9c62"
}